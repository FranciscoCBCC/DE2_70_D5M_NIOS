
DE2_70_D5M.elf:     file format elf32-littlenios2
DE2_70_D5M.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000027c8 memsz 0x000027c8 flags r-x
    LOAD off    0x000037e8 vaddr 0x040027e8 paddr 0x04003e70 align 2**12
         filesz 0x00001688 memsz 0x00001688 flags rw-
    LOAD off    0x000054f8 vaddr 0x040054f8 paddr 0x040054f8 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000025ec  040001b4  040001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  040027a0  040027a0  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001688  040027e8  04003e70  000037e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  040054f8  040054f8  000054f8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000538  00000000  00000000  00004e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007c5  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009f74  00000000  00000000  00005b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000245e  00000000  00000000  0000fb09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005f51  00000000  00000000  00011f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000884  00000000  00000000  00017eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ba5  00000000  00000000  0001873c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dea  00000000  00000000  000192e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001bb60  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0001bb63  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bb72  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bb73  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001bb74  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001bb7d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001bb86  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001bb8f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0001bb95  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00074c88  00000000  00000000  0001bbc4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b4 l    d  .text	00000000 .text
040027a0 l    d  .rodata	00000000 .rodata
040027e8 l    d  .rwdata	00000000 .rwdata
040054f8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
04000368 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040027e8 l     O .rwdata	00001060 jtag_uart
04003848 l     O .rwdata	00000054 Pixel_Buffer_DMA
040006b0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040008f0 l     F .text	00000228 altera_avalon_jtag_uart_irq
04000b18 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
040013e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001464 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04001544 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04001954 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04001aa4 l     F .text	000000f8 alt_file_locked
04001d28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04003a44 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04002550 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400273c l     F .text	00000040 alt_sim_halt
040003d4 g     F .text	0000006c alt_main
04005514 g     O .bss	00000100 alt_irq
04003e70 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04005510 g     O .bss	00000004 errno
040054fc g     O .bss	00000004 alt_argv
0400be44 g       *ABS*	00000000 _gp
040038c4 g     O .rwdata	00000180 alt_fd_list
04001fc4 g     F .text	00000094 alt_find_dev
04002308 g     F .text	000000a0 memcpy
04001a2c g     F .text	00000078 alt_io_redirect
040027a0 g       *ABS*	00000000 __DTOR_END__
04000d30 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04003e54 g     O .rwdata	00000004 alt_max_fd
04003e6c g     O .rwdata	00000004 _global_impure_ptr
040057a4 g       *ABS*	00000000 __bss_end
0400185c g     F .text	000000f8 alt_iic_isr_register
04001e98 g     F .text	0000010c alt_tick
04001814 g     F .text	00000048 alt_ic_irq_enabled
04001e00 g     F .text	00000098 alt_alarm_stop
04005504 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000c8 alt_irq_handler
0400389c g     O .rwdata	00000028 alt_dev_null
04001448 g     F .text	0000001c alt_dcache_flush_all
04003e70 g       *ABS*	00000000 __ram_rwdata_end
00201000 g       *ABS*	00000000 __alt_mem_onchip_memory
04003e4c g     O .rwdata	00000008 alt_dev_list
040027e8 g       *ABS*	00000000 __ram_rodata_end
040057a4 g       *ABS*	00000000 end
04000830 g     F .text	000000c0 altera_avalon_jtag_uart_init
0400279c g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
04000f54 g     F .text	00000240 altera_avalon_jtag_uart_write
04002554 g     F .text	000001b0 __call_exitprocs
040001b4 g     F .text	0000003c _start
04005508 g     O .bss	00000004 _alt_tick_rate
0400550c g     O .bss	00000004 _alt_nticks
04000474 g     F .text	0000023c alt_sys_init
0400241c g     F .text	00000134 __register_exitproc
04000238 g     F .text	000000b0 VGA_box
04000bc8 g     F .text	00000074 altera_avalon_jtag_uart_close
04002704 g     F .text	00000038 __mulsi3
040027e8 g       *ABS*	00000000 __ram_rwdata_start
040027a0 g       *ABS*	00000000 __ram_rodata_start
040006e8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04002178 g     F .text	000000d0 alt_get_fd
04002294 g     F .text	00000074 memcmp
04000798 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
040057a4 g       *ABS*	00000000 __alt_stack_base
040007e0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
04002058 g     F .text	00000120 alt_find_file
04001490 g     F .text	000000b4 alt_dev_llist_insert
040054f8 g       *ABS*	00000000 __bss_start
040001f0 g     F .text	00000048 main
04005500 g     O .bss	00000004 alt_envp
04000740 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04005614 g     O .bss	00000190 _atexit0
04003e58 g     O .rwdata	00000004 alt_errno
040027a0 g       *ABS*	00000000 __CTOR_END__
040027a0 g       *ABS*	00000000 __flash_rodata_start
040027a0 g       *ABS*	00000000 __DTOR_LIST__
04000440 g     F .text	00000034 alt_irq_init
04001d88 g     F .text	00000078 alt_release_fd
04002248 g     F .text	00000014 atexit
04003e68 g     O .rwdata	00000004 _impure_ptr
040054f8 g     O .bss	00000004 alt_argc
04001608 g     F .text	00000064 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04003e44 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04001688 g     F .text	00000050 alt_ic_isr_register
04003e70 g       *ABS*	00000000 _edata
040057a4 g       *ABS*	00000000 _end
040001b4 g       *ABS*	00000000 __ram_exceptions_end
04000c3c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04001774 g     F .text	000000a0 alt_ic_irq_disable
04001fa4 g     F .text	00000020 altera_nios2_qsys_irq_init
0400225c g     F .text	00000038 exit
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400277c g     F .text	00000020 _exit
04001194 g     F .text	00000154 alt_alarm_start
040023a8 g     F .text	00000074 strlen
04001b9c g     F .text	0000018c open
0400166c g     F .text	0000001c alt_icache_flush_all
04003e5c g     O .rwdata	00000004 alt_priority_mask
040016d8 g     F .text	0000009c alt_ic_irq_enable
04003e60 g     O .rwdata	00000008 alt_alarm_list
040015a4 g     F .text	00000064 _do_ctors
040012e8 g     F .text	00000100 close
040002e8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08406d14 	ori	at,at,436
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40000fc:	0005313a 	rdctl	r2,ipending
 4000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 4000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 400010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000110:	00800044 	movi	r2,1
 4000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000118:	e0ffff17 	ldw	r3,-4(fp)
 400011c:	e0bffe17 	ldw	r2,-8(fp)
 4000120:	1884703a 	and	r2,r3,r2
 4000124:	1005003a 	cmpeq	r2,r2,zero
 4000128:	1000161e 	bne	r2,zero,4000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	e0bffd17 	ldw	r2,-12(fp)
 4000130:	00c10034 	movhi	r3,1024
 4000134:	18d54504 	addi	r3,r3,21780
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	11400017 	ldw	r5,0(r2)
 4000144:	e0bffd17 	ldw	r2,-12(fp)
 4000148:	00c10034 	movhi	r3,1024
 400014c:	18d54504 	addi	r3,r3,21780
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	10c5883a 	add	r2,r2,r3
 4000158:	10800104 	addi	r2,r2,4
 400015c:	11000017 	ldw	r4,0(r2)
 4000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000164:	0005313a 	rdctl	r2,ipending
 4000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 400016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	1004c03a 	cmpne	r2,r2,zero
 400017c:	103fe31e 	bne	r2,zero,400010c <alt_irq_handler+0x20>
 4000180:	00000706 	br	40001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000184:	e0bffe17 	ldw	r2,-8(fp)
 4000188:	1085883a 	add	r2,r2,r2
 400018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000190:	e0bffd17 	ldw	r2,-12(fp)
 4000194:	10800044 	addi	r2,r2,1
 4000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 400019c:	003fde06 	br	4000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a0:	e037883a 	mov	sp,fp
 40001a4:	dfc00117 	ldw	ra,4(sp)
 40001a8:	df000017 	ldw	fp,0(sp)
 40001ac:	dec00204 	addi	sp,sp,8
 40001b0:	f800283a 	ret

Disassembly of section .text:

040001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001b4:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001bc:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001c0:	d6af9114 	ori	gp,gp,48708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001c4:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001c8:	10953e14 	ori	r2,r2,21752

    movhi r3, %hi(__bss_end)
 40001cc:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001d0:	18d5e914 	ori	r3,r3,22436

    beq r2, r3, 1f
 40001d4:	10c00326 	beq	r2,r3,40001e4 <_start+0x30>

0:
    stw zero, (r2)
 40001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e0:	10fffd36 	bltu	r2,r3,40001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001e4:	40002e80 	call	40002e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001e8:	40003d40 	call	40003d4 <alt_main>

040001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001ec:	003fff06 	br	40001ec <alt_after_alt_main>

040001f0 <main>:
/********************************************************************************
 * This program demonstrates use of pixel buffer. It Draws a blue box on the
 * VGA display
********************************************************************************/
int main(void)
{
 40001f0:	defffd04 	addi	sp,sp,-12
 40001f4:	dfc00215 	stw	ra,8(sp)
 40001f8:	df000115 	stw	fp,4(sp)
 40001fc:	df000104 	addi	fp,sp,4

	/* draw a blue box approx in the middle of the screen */
	do{
 	VGA_box (0, 0, 319, 239, 0); // clear screen
 4000200:	d8000015 	stw	zero,0(sp)
 4000204:	0009883a 	mov	r4,zero
 4000208:	000b883a 	mov	r5,zero
 400020c:	01804fc4 	movi	r6,319
 4000210:	01c03bc4 	movi	r7,239
 4000214:	40002380 	call	4000238 <VGA_box>
	VGA_box (136 /*x1*/, 112 /*y1*/, 200 /*x2*/, 128 /*y2*/, 0x187F);
 4000218:	00861fc4 	movi	r2,6271
 400021c:	d8800015 	stw	r2,0(sp)
 4000220:	01002204 	movi	r4,136
 4000224:	01401c04 	movi	r5,112
 4000228:	01803204 	movi	r6,200
 400022c:	01c02004 	movi	r7,128
 4000230:	40002380 	call	4000238 <VGA_box>
	}while('true');
 4000234:	003ff206 	br	4000200 <main+0x10>

04000238 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
 4000238:	defff604 	addi	sp,sp,-40
 400023c:	df000915 	stw	fp,36(sp)
 4000240:	df000904 	addi	fp,sp,36
 4000244:	e13ffb15 	stw	r4,-20(fp)
 4000248:	e17ffc15 	stw	r5,-16(fp)
 400024c:	e1bffd15 	stw	r6,-12(fp)
 4000250:	e1fffe15 	stw	r7,-8(fp)
 4000254:	e0800117 	ldw	r2,4(fp)
 4000258:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	/* Declare volatile pointer to pixel buffer (volatile means that IO load
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile short * pixel_buffer = (short *) 0x00000000;	// VGA pixel buffer address
 400025c:	e03ff715 	stw	zero,-36(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
 4000260:	e0bffc17 	ldw	r2,-16(fp)
 4000264:	e0bff915 	stw	r2,-28(fp)
 4000268:	00001806 	br	40002cc <VGA_box+0x94>
	{
		col = x1;
 400026c:	e0bffb17 	ldw	r2,-20(fp)
 4000270:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
 4000274:	00000f06 	br	40002b4 <VGA_box+0x7c>
		{
			offset = (row << 9) + col;
 4000278:	e0bff917 	ldw	r2,-28(fp)
 400027c:	1006927a 	slli	r3,r2,9
 4000280:	e0bff817 	ldw	r2,-32(fp)
 4000284:	1885883a 	add	r2,r3,r2
 4000288:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
 400028c:	e0bffa17 	ldw	r2,-24(fp)
 4000290:	1085883a 	add	r2,r2,r2
 4000294:	1007883a 	mov	r3,r2
 4000298:	e0bff717 	ldw	r2,-36(fp)
 400029c:	1887883a 	add	r3,r3,r2
 40002a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40002a4:	1880000d 	sth	r2,0(r3)
			++col;
 40002a8:	e0bff817 	ldw	r2,-32(fp)
 40002ac:	10800044 	addi	r2,r2,1
 40002b0:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
 40002b4:	e0fff817 	ldw	r3,-32(fp)
 40002b8:	e0bffd17 	ldw	r2,-12(fp)
 40002bc:	10ffee0e 	bge	r2,r3,4000278 <VGA_box+0x40>
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile short * pixel_buffer = (short *) 0x00000000;	// VGA pixel buffer address

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
 40002c0:	e0bff917 	ldw	r2,-28(fp)
 40002c4:	10800044 	addi	r2,r2,1
 40002c8:	e0bff915 	stw	r2,-28(fp)
 40002cc:	e0fff917 	ldw	r3,-28(fp)
 40002d0:	e0bffe17 	ldw	r2,-8(fp)
 40002d4:	10ffe50e 	bge	r2,r3,400026c <VGA_box+0x34>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
 40002d8:	e037883a 	mov	sp,fp
 40002dc:	df000017 	ldw	fp,0(sp)
 40002e0:	dec00104 	addi	sp,sp,4
 40002e4:	f800283a 	ret

040002e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40002e8:	defffe04 	addi	sp,sp,-8
 40002ec:	dfc00115 	stw	ra,4(sp)
 40002f0:	df000015 	stw	fp,0(sp)
 40002f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40002f8:	01010034 	movhi	r4,1024
 40002fc:	210f9c04 	addi	r4,r4,15984
 4000300:	01410034 	movhi	r5,1024
 4000304:	2949fa04 	addi	r5,r5,10216
 4000308:	01810034 	movhi	r6,1024
 400030c:	318f9c04 	addi	r6,r6,15984
 4000310:	40003680 	call	4000368 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000314:	01010034 	movhi	r4,1024
 4000318:	21000804 	addi	r4,r4,32
 400031c:	01410034 	movhi	r5,1024
 4000320:	29400804 	addi	r5,r5,32
 4000324:	01810034 	movhi	r6,1024
 4000328:	31806d04 	addi	r6,r6,436
 400032c:	40003680 	call	4000368 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4000330:	01010034 	movhi	r4,1024
 4000334:	2109e804 	addi	r4,r4,10144
 4000338:	01410034 	movhi	r5,1024
 400033c:	2949e804 	addi	r5,r5,10144
 4000340:	01810034 	movhi	r6,1024
 4000344:	3189fa04 	addi	r6,r6,10216
 4000348:	40003680 	call	4000368 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400034c:	40014480 	call	4001448 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4000350:	400166c0 	call	400166c <alt_icache_flush_all>
}
 4000354:	e037883a 	mov	sp,fp
 4000358:	dfc00117 	ldw	ra,4(sp)
 400035c:	df000017 	ldw	fp,0(sp)
 4000360:	dec00204 	addi	sp,sp,8
 4000364:	f800283a 	ret

04000368 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000368:	defffc04 	addi	sp,sp,-16
 400036c:	df000315 	stw	fp,12(sp)
 4000370:	df000304 	addi	fp,sp,12
 4000374:	e13ffd15 	stw	r4,-12(fp)
 4000378:	e17ffe15 	stw	r5,-8(fp)
 400037c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4000380:	e0fffe17 	ldw	r3,-8(fp)
 4000384:	e0bffd17 	ldw	r2,-12(fp)
 4000388:	18800e26 	beq	r3,r2,40003c4 <alt_load_section+0x5c>
  {
    while( to != end )
 400038c:	00000a06 	br	40003b8 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4000390:	e0bffd17 	ldw	r2,-12(fp)
 4000394:	10c00017 	ldw	r3,0(r2)
 4000398:	e0bffe17 	ldw	r2,-8(fp)
 400039c:	10c00015 	stw	r3,0(r2)
 40003a0:	e0bffe17 	ldw	r2,-8(fp)
 40003a4:	10800104 	addi	r2,r2,4
 40003a8:	e0bffe15 	stw	r2,-8(fp)
 40003ac:	e0bffd17 	ldw	r2,-12(fp)
 40003b0:	10800104 	addi	r2,r2,4
 40003b4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40003b8:	e0fffe17 	ldw	r3,-8(fp)
 40003bc:	e0bfff17 	ldw	r2,-4(fp)
 40003c0:	18bff31e 	bne	r3,r2,4000390 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 40003c4:	e037883a 	mov	sp,fp
 40003c8:	df000017 	ldw	fp,0(sp)
 40003cc:	dec00104 	addi	sp,sp,4
 40003d0:	f800283a 	ret

040003d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40003d4:	defffd04 	addi	sp,sp,-12
 40003d8:	dfc00215 	stw	ra,8(sp)
 40003dc:	df000115 	stw	fp,4(sp)
 40003e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40003e4:	0009883a 	mov	r4,zero
 40003e8:	40004400 	call	4000440 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40003ec:	40004740 	call	4000474 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40003f0:	01010034 	movhi	r4,1024
 40003f4:	2109e804 	addi	r4,r4,10144
 40003f8:	01410034 	movhi	r5,1024
 40003fc:	2949e804 	addi	r5,r5,10144
 4000400:	01810034 	movhi	r6,1024
 4000404:	3189e804 	addi	r6,r6,10144
 4000408:	4001a2c0 	call	4001a2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400040c:	40015a40 	call	40015a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4000410:	01010034 	movhi	r4,1024
 4000414:	21058204 	addi	r4,r4,5640
 4000418:	40022480 	call	4002248 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400041c:	d125ad17 	ldw	r4,-26956(gp)
 4000420:	d165ae17 	ldw	r5,-26952(gp)
 4000424:	d1a5af17 	ldw	r6,-26948(gp)
 4000428:	40001f00 	call	40001f0 <main>
 400042c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000430:	01000044 	movi	r4,1
 4000434:	40012e80 	call	40012e8 <close>
  exit (result);
 4000438:	e13fff17 	ldw	r4,-4(fp)
 400043c:	400225c0 	call	400225c <exit>

04000440 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000440:	defffd04 	addi	sp,sp,-12
 4000444:	dfc00215 	stw	ra,8(sp)
 4000448:	df000115 	stw	fp,4(sp)
 400044c:	df000104 	addi	fp,sp,4
 4000450:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 4000454:	4001fa40 	call	4001fa4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000458:	00800044 	movi	r2,1
 400045c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000460:	e037883a 	mov	sp,fp
 4000464:	dfc00117 	ldw	ra,4(sp)
 4000468:	df000017 	ldw	fp,0(sp)
 400046c:	dec00204 	addi	sp,sp,8
 4000470:	f800283a 	ret

04000474 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000474:	defffd04 	addi	sp,sp,-12
 4000478:	dfc00215 	stw	ra,8(sp)
 400047c:	df000115 	stw	fp,4(sp)
 4000480:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4000484:	01010034 	movhi	r4,1024
 4000488:	210a0404 	addi	r4,r4,10256
 400048c:	000b883a 	mov	r5,zero
 4000490:	01800144 	movi	r6,5
 4000494:	40008300 	call	4000830 <altera_avalon_jtag_uart_init>
 4000498:	01010034 	movhi	r4,1024
 400049c:	2109fa04 	addi	r4,r4,10216
 40004a0:	40006b00 	call	40006b0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 40004a4:	00810034 	movhi	r2,1024
 40004a8:	108e1204 	addi	r2,r2,14408
 40004ac:	10800a17 	ldw	r2,40(r2)
 40004b0:	10800017 	ldw	r2,0(r2)
 40004b4:	1007883a 	mov	r3,r2
 40004b8:	00810034 	movhi	r2,1024
 40004bc:	108e1204 	addi	r2,r2,14408
 40004c0:	10c00b15 	stw	r3,44(r2)
 40004c4:	00810034 	movhi	r2,1024
 40004c8:	108e1204 	addi	r2,r2,14408
 40004cc:	10800a17 	ldw	r2,40(r2)
 40004d0:	10800104 	addi	r2,r2,4
 40004d4:	10800017 	ldw	r2,0(r2)
 40004d8:	1007883a 	mov	r3,r2
 40004dc:	00810034 	movhi	r2,1024
 40004e0:	108e1204 	addi	r2,r2,14408
 40004e4:	10c00c15 	stw	r3,48(r2)
 40004e8:	00810034 	movhi	r2,1024
 40004ec:	108e1204 	addi	r2,r2,14408
 40004f0:	10800a17 	ldw	r2,40(r2)
 40004f4:	10800204 	addi	r2,r2,8
 40004f8:	10800017 	ldw	r2,0(r2)
 40004fc:	10ffffcc 	andi	r3,r2,65535
 4000500:	00810034 	movhi	r2,1024
 4000504:	108e1204 	addi	r2,r2,14408
 4000508:	10c00f15 	stw	r3,60(r2)
 400050c:	00810034 	movhi	r2,1024
 4000510:	108e1204 	addi	r2,r2,14408
 4000514:	10800a17 	ldw	r2,40(r2)
 4000518:	10800204 	addi	r2,r2,8
 400051c:	10800017 	ldw	r2,0(r2)
 4000520:	1005d43a 	srai	r2,r2,16
 4000524:	10ffffcc 	andi	r3,r2,65535
 4000528:	00810034 	movhi	r2,1024
 400052c:	108e1204 	addi	r2,r2,14408
 4000530:	10c01015 	stw	r3,64(r2)
 4000534:	00810034 	movhi	r2,1024
 4000538:	108e1204 	addi	r2,r2,14408
 400053c:	10800a17 	ldw	r2,40(r2)
 4000540:	10800304 	addi	r2,r2,12
 4000544:	10800017 	ldw	r2,0(r2)
 4000548:	1005d07a 	srai	r2,r2,1
 400054c:	10c0004c 	andi	r3,r2,1
 4000550:	00810034 	movhi	r2,1024
 4000554:	108e1204 	addi	r2,r2,14408
 4000558:	10c00d15 	stw	r3,52(r2)
 400055c:	00810034 	movhi	r2,1024
 4000560:	108e1204 	addi	r2,r2,14408
 4000564:	10800a17 	ldw	r2,40(r2)
 4000568:	10800304 	addi	r2,r2,12
 400056c:	10800017 	ldw	r2,0(r2)
 4000570:	1005d13a 	srai	r2,r2,4
 4000574:	10c003cc 	andi	r3,r2,15
 4000578:	00810034 	movhi	r2,1024
 400057c:	108e1204 	addi	r2,r2,14408
 4000580:	10c00e15 	stw	r3,56(r2)
 4000584:	00810034 	movhi	r2,1024
 4000588:	108e1204 	addi	r2,r2,14408
 400058c:	10800a17 	ldw	r2,40(r2)
 4000590:	10800304 	addi	r2,r2,12
 4000594:	10800017 	ldw	r2,0(r2)
 4000598:	1005d43a 	srai	r2,r2,16
 400059c:	1007883a 	mov	r3,r2
 40005a0:	00bfffc4 	movi	r2,-1
 40005a4:	1884703a 	and	r2,r3,r2
 40005a8:	e0bfff45 	stb	r2,-3(fp)
 40005ac:	00810034 	movhi	r2,1024
 40005b0:	108e1204 	addi	r2,r2,14408
 40005b4:	10800a17 	ldw	r2,40(r2)
 40005b8:	10800304 	addi	r2,r2,12
 40005bc:	10800017 	ldw	r2,0(r2)
 40005c0:	1005d63a 	srai	r2,r2,24
 40005c4:	1007883a 	mov	r3,r2
 40005c8:	00bfffc4 	movi	r2,-1
 40005cc:	1884703a 	and	r2,r3,r2
 40005d0:	e0bfff05 	stb	r2,-4(fp)
 40005d4:	00810034 	movhi	r2,1024
 40005d8:	108e1204 	addi	r2,r2,14408
 40005dc:	10800e17 	ldw	r2,56(r2)
 40005e0:	10800058 	cmpnei	r2,r2,1
 40005e4:	1000041e 	bne	r2,zero,40005f8 <alt_sys_init+0x184>
 40005e8:	00810034 	movhi	r2,1024
 40005ec:	108e1204 	addi	r2,r2,14408
 40005f0:	10001115 	stw	zero,68(r2)
 40005f4:	00000e06 	br	4000630 <alt_sys_init+0x1bc>
 40005f8:	00810034 	movhi	r2,1024
 40005fc:	108e1204 	addi	r2,r2,14408
 4000600:	10800e17 	ldw	r2,56(r2)
 4000604:	10800098 	cmpnei	r2,r2,2
 4000608:	1000051e 	bne	r2,zero,4000620 <alt_sys_init+0x1ac>
 400060c:	00c10034 	movhi	r3,1024
 4000610:	18ce1204 	addi	r3,r3,14408
 4000614:	00800044 	movi	r2,1
 4000618:	18801115 	stw	r2,68(r3)
 400061c:	00000406 	br	4000630 <alt_sys_init+0x1bc>
 4000620:	00c10034 	movhi	r3,1024
 4000624:	18ce1204 	addi	r3,r3,14408
 4000628:	00800084 	movi	r2,2
 400062c:	18801115 	stw	r2,68(r3)
 4000630:	e0ffff43 	ldbu	r3,-3(fp)
 4000634:	00800804 	movi	r2,32
 4000638:	10c7c83a 	sub	r3,r2,r3
 400063c:	00bfffc4 	movi	r2,-1
 4000640:	10c6d83a 	srl	r3,r2,r3
 4000644:	00810034 	movhi	r2,1024
 4000648:	108e1204 	addi	r2,r2,14408
 400064c:	10c01215 	stw	r3,72(r2)
 4000650:	e0ffff43 	ldbu	r3,-3(fp)
 4000654:	00810034 	movhi	r2,1024
 4000658:	108e1204 	addi	r2,r2,14408
 400065c:	10801117 	ldw	r2,68(r2)
 4000660:	1887883a 	add	r3,r3,r2
 4000664:	00810034 	movhi	r2,1024
 4000668:	108e1204 	addi	r2,r2,14408
 400066c:	10c01315 	stw	r3,76(r2)
 4000670:	e0ffff03 	ldbu	r3,-4(fp)
 4000674:	00800804 	movi	r2,32
 4000678:	10c7c83a 	sub	r3,r2,r3
 400067c:	00bfffc4 	movi	r2,-1
 4000680:	10c6d83a 	srl	r3,r2,r3
 4000684:	00810034 	movhi	r2,1024
 4000688:	108e1204 	addi	r2,r2,14408
 400068c:	10c01415 	stw	r3,80(r2)
 4000690:	01010034 	movhi	r4,1024
 4000694:	210e1204 	addi	r4,r4,14408
 4000698:	40006b00 	call	40006b0 <alt_dev_reg>
}
 400069c:	e037883a 	mov	sp,fp
 40006a0:	dfc00117 	ldw	ra,4(sp)
 40006a4:	df000017 	ldw	fp,0(sp)
 40006a8:	dec00204 	addi	sp,sp,8
 40006ac:	f800283a 	ret

040006b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40006b0:	defffd04 	addi	sp,sp,-12
 40006b4:	dfc00215 	stw	ra,8(sp)
 40006b8:	df000115 	stw	fp,4(sp)
 40006bc:	df000104 	addi	fp,sp,4
 40006c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40006c4:	e13fff17 	ldw	r4,-4(fp)
 40006c8:	01410034 	movhi	r5,1024
 40006cc:	294f9304 	addi	r5,r5,15948
 40006d0:	40014900 	call	4001490 <alt_dev_llist_insert>
}
 40006d4:	e037883a 	mov	sp,fp
 40006d8:	dfc00117 	ldw	ra,4(sp)
 40006dc:	df000017 	ldw	fp,0(sp)
 40006e0:	dec00204 	addi	sp,sp,8
 40006e4:	f800283a 	ret

040006e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40006e8:	defffa04 	addi	sp,sp,-24
 40006ec:	dfc00515 	stw	ra,20(sp)
 40006f0:	df000415 	stw	fp,16(sp)
 40006f4:	df000404 	addi	fp,sp,16
 40006f8:	e13ffd15 	stw	r4,-12(fp)
 40006fc:	e17ffe15 	stw	r5,-8(fp)
 4000700:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000704:	e0bffd17 	ldw	r2,-12(fp)
 4000708:	10800017 	ldw	r2,0(r2)
 400070c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000710:	e0bffc17 	ldw	r2,-16(fp)
 4000714:	11000a04 	addi	r4,r2,40
 4000718:	e0bffd17 	ldw	r2,-12(fp)
 400071c:	11c00217 	ldw	r7,8(r2)
 4000720:	e17ffe17 	ldw	r5,-8(fp)
 4000724:	e1bfff17 	ldw	r6,-4(fp)
 4000728:	4000d300 	call	4000d30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400072c:	e037883a 	mov	sp,fp
 4000730:	dfc00117 	ldw	ra,4(sp)
 4000734:	df000017 	ldw	fp,0(sp)
 4000738:	dec00204 	addi	sp,sp,8
 400073c:	f800283a 	ret

04000740 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4000740:	defffa04 	addi	sp,sp,-24
 4000744:	dfc00515 	stw	ra,20(sp)
 4000748:	df000415 	stw	fp,16(sp)
 400074c:	df000404 	addi	fp,sp,16
 4000750:	e13ffd15 	stw	r4,-12(fp)
 4000754:	e17ffe15 	stw	r5,-8(fp)
 4000758:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400075c:	e0bffd17 	ldw	r2,-12(fp)
 4000760:	10800017 	ldw	r2,0(r2)
 4000764:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000768:	e0bffc17 	ldw	r2,-16(fp)
 400076c:	11000a04 	addi	r4,r2,40
 4000770:	e0bffd17 	ldw	r2,-12(fp)
 4000774:	11c00217 	ldw	r7,8(r2)
 4000778:	e17ffe17 	ldw	r5,-8(fp)
 400077c:	e1bfff17 	ldw	r6,-4(fp)
 4000780:	4000f540 	call	4000f54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4000784:	e037883a 	mov	sp,fp
 4000788:	dfc00117 	ldw	ra,4(sp)
 400078c:	df000017 	ldw	fp,0(sp)
 4000790:	dec00204 	addi	sp,sp,8
 4000794:	f800283a 	ret

04000798 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4000798:	defffc04 	addi	sp,sp,-16
 400079c:	dfc00315 	stw	ra,12(sp)
 40007a0:	df000215 	stw	fp,8(sp)
 40007a4:	df000204 	addi	fp,sp,8
 40007a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40007ac:	e0bfff17 	ldw	r2,-4(fp)
 40007b0:	10800017 	ldw	r2,0(r2)
 40007b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40007b8:	e0bffe17 	ldw	r2,-8(fp)
 40007bc:	11000a04 	addi	r4,r2,40
 40007c0:	e0bfff17 	ldw	r2,-4(fp)
 40007c4:	11400217 	ldw	r5,8(r2)
 40007c8:	4000bc80 	call	4000bc8 <altera_avalon_jtag_uart_close>
}
 40007cc:	e037883a 	mov	sp,fp
 40007d0:	dfc00117 	ldw	ra,4(sp)
 40007d4:	df000017 	ldw	fp,0(sp)
 40007d8:	dec00204 	addi	sp,sp,8
 40007dc:	f800283a 	ret

040007e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40007e0:	defffa04 	addi	sp,sp,-24
 40007e4:	dfc00515 	stw	ra,20(sp)
 40007e8:	df000415 	stw	fp,16(sp)
 40007ec:	df000404 	addi	fp,sp,16
 40007f0:	e13ffd15 	stw	r4,-12(fp)
 40007f4:	e17ffe15 	stw	r5,-8(fp)
 40007f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40007fc:	e0bffd17 	ldw	r2,-12(fp)
 4000800:	10800017 	ldw	r2,0(r2)
 4000804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4000808:	e0bffc17 	ldw	r2,-16(fp)
 400080c:	11000a04 	addi	r4,r2,40
 4000810:	e17ffe17 	ldw	r5,-8(fp)
 4000814:	e1bfff17 	ldw	r6,-4(fp)
 4000818:	4000c3c0 	call	4000c3c <altera_avalon_jtag_uart_ioctl>
}
 400081c:	e037883a 	mov	sp,fp
 4000820:	dfc00117 	ldw	ra,4(sp)
 4000824:	df000017 	ldw	fp,0(sp)
 4000828:	dec00204 	addi	sp,sp,8
 400082c:	f800283a 	ret

04000830 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4000830:	defffa04 	addi	sp,sp,-24
 4000834:	dfc00515 	stw	ra,20(sp)
 4000838:	df000415 	stw	fp,16(sp)
 400083c:	df000404 	addi	fp,sp,16
 4000840:	e13ffd15 	stw	r4,-12(fp)
 4000844:	e17ffe15 	stw	r5,-8(fp)
 4000848:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400084c:	e0fffd17 	ldw	r3,-12(fp)
 4000850:	00800044 	movi	r2,1
 4000854:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4000858:	e0bffd17 	ldw	r2,-12(fp)
 400085c:	10800017 	ldw	r2,0(r2)
 4000860:	11000104 	addi	r4,r2,4
 4000864:	e0bffd17 	ldw	r2,-12(fp)
 4000868:	10800817 	ldw	r2,32(r2)
 400086c:	1007883a 	mov	r3,r2
 4000870:	2005883a 	mov	r2,r4
 4000874:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4000878:	e13ffe17 	ldw	r4,-8(fp)
 400087c:	e17fff17 	ldw	r5,-4(fp)
 4000880:	d8000015 	stw	zero,0(sp)
 4000884:	01810034 	movhi	r6,1024
 4000888:	31823c04 	addi	r6,r6,2288
 400088c:	e1fffd17 	ldw	r7,-12(fp)
 4000890:	40016880 	call	4001688 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4000894:	e0bffd17 	ldw	r2,-12(fp)
 4000898:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400089c:	e0bffd17 	ldw	r2,-12(fp)
 40008a0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40008a4:	00810034 	movhi	r2,1024
 40008a8:	10954204 	addi	r2,r2,21768
 40008ac:	10800017 	ldw	r2,0(r2)
 40008b0:	100b883a 	mov	r5,r2
 40008b4:	01810034 	movhi	r6,1024
 40008b8:	3182c604 	addi	r6,r6,2840
 40008bc:	e1fffd17 	ldw	r7,-12(fp)
 40008c0:	40011940 	call	4001194 <alt_alarm_start>
 40008c4:	1004403a 	cmpge	r2,r2,zero
 40008c8:	1000041e 	bne	r2,zero,40008dc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40008cc:	e0fffd17 	ldw	r3,-12(fp)
 40008d0:	00a00034 	movhi	r2,32768
 40008d4:	10bfffc4 	addi	r2,r2,-1
 40008d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40008dc:	e037883a 	mov	sp,fp
 40008e0:	dfc00117 	ldw	ra,4(sp)
 40008e4:	df000017 	ldw	fp,0(sp)
 40008e8:	dec00204 	addi	sp,sp,8
 40008ec:	f800283a 	ret

040008f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40008f0:	defff804 	addi	sp,sp,-32
 40008f4:	df000715 	stw	fp,28(sp)
 40008f8:	df000704 	addi	fp,sp,28
 40008fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4000900:	e0bfff17 	ldw	r2,-4(fp)
 4000904:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 4000908:	e0bffe17 	ldw	r2,-8(fp)
 400090c:	10800017 	ldw	r2,0(r2)
 4000910:	e0bffd15 	stw	r2,-12(fp)
 4000914:	00000006 	br	4000918 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000918:	e0bffd17 	ldw	r2,-12(fp)
 400091c:	10800104 	addi	r2,r2,4
 4000920:	10800037 	ldwio	r2,0(r2)
 4000924:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4000928:	e0bffc17 	ldw	r2,-16(fp)
 400092c:	1080c00c 	andi	r2,r2,768
 4000930:	1005003a 	cmpeq	r2,r2,zero
 4000934:	1000741e 	bne	r2,zero,4000b08 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4000938:	e0bffc17 	ldw	r2,-16(fp)
 400093c:	1080400c 	andi	r2,r2,256
 4000940:	1005003a 	cmpeq	r2,r2,zero
 4000944:	1000351e 	bne	r2,zero,4000a1c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4000948:	00800074 	movhi	r2,1
 400094c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000950:	e0bffe17 	ldw	r2,-8(fp)
 4000954:	10800a17 	ldw	r2,40(r2)
 4000958:	10800044 	addi	r2,r2,1
 400095c:	1081ffcc 	andi	r2,r2,2047
 4000960:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 4000964:	e0bffe17 	ldw	r2,-8(fp)
 4000968:	10c00b17 	ldw	r3,44(r2)
 400096c:	e0bffa17 	ldw	r2,-24(fp)
 4000970:	18801626 	beq	r3,r2,40009cc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4000974:	e0bffd17 	ldw	r2,-12(fp)
 4000978:	10800037 	ldwio	r2,0(r2)
 400097c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4000980:	e0bffb17 	ldw	r2,-20(fp)
 4000984:	10a0000c 	andi	r2,r2,32768
 4000988:	1005003a 	cmpeq	r2,r2,zero
 400098c:	10000f1e 	bne	r2,zero,40009cc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000990:	e0bffe17 	ldw	r2,-8(fp)
 4000994:	10c00a17 	ldw	r3,40(r2)
 4000998:	e0bffb17 	ldw	r2,-20(fp)
 400099c:	1009883a 	mov	r4,r2
 40009a0:	e0bffe17 	ldw	r2,-8(fp)
 40009a4:	1885883a 	add	r2,r3,r2
 40009a8:	10800e04 	addi	r2,r2,56
 40009ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40009b0:	e0bffe17 	ldw	r2,-8(fp)
 40009b4:	10800a17 	ldw	r2,40(r2)
 40009b8:	10800044 	addi	r2,r2,1
 40009bc:	10c1ffcc 	andi	r3,r2,2047
 40009c0:	e0bffe17 	ldw	r2,-8(fp)
 40009c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40009c8:	003fe106 	br	4000950 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40009cc:	e0bffb17 	ldw	r2,-20(fp)
 40009d0:	10bfffec 	andhi	r2,r2,65535
 40009d4:	1005003a 	cmpeq	r2,r2,zero
 40009d8:	1000101e 	bne	r2,zero,4000a1c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40009dc:	e0bffe17 	ldw	r2,-8(fp)
 40009e0:	10c00817 	ldw	r3,32(r2)
 40009e4:	00bfff84 	movi	r2,-2
 40009e8:	1886703a 	and	r3,r3,r2
 40009ec:	e0bffe17 	ldw	r2,-8(fp)
 40009f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40009f4:	e0bffd17 	ldw	r2,-12(fp)
 40009f8:	11000104 	addi	r4,r2,4
 40009fc:	e0bffe17 	ldw	r2,-8(fp)
 4000a00:	10800817 	ldw	r2,32(r2)
 4000a04:	1007883a 	mov	r3,r2
 4000a08:	2005883a 	mov	r2,r4
 4000a0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000a10:	e0bffd17 	ldw	r2,-12(fp)
 4000a14:	10800104 	addi	r2,r2,4
 4000a18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4000a1c:	e0bffc17 	ldw	r2,-16(fp)
 4000a20:	1080800c 	andi	r2,r2,512
 4000a24:	1005003a 	cmpeq	r2,r2,zero
 4000a28:	103fbb1e 	bne	r2,zero,4000918 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4000a2c:	e0bffc17 	ldw	r2,-16(fp)
 4000a30:	10bfffec 	andhi	r2,r2,65535
 4000a34:	1004d43a 	srli	r2,r2,16
 4000a38:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4000a3c:	00001506 	br	4000a94 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4000a40:	e13ffd17 	ldw	r4,-12(fp)
 4000a44:	e0bffe17 	ldw	r2,-8(fp)
 4000a48:	10c00d17 	ldw	r3,52(r2)
 4000a4c:	e0bffe17 	ldw	r2,-8(fp)
 4000a50:	1885883a 	add	r2,r3,r2
 4000a54:	10820e04 	addi	r2,r2,2104
 4000a58:	10800003 	ldbu	r2,0(r2)
 4000a5c:	10c03fcc 	andi	r3,r2,255
 4000a60:	18c0201c 	xori	r3,r3,128
 4000a64:	18ffe004 	addi	r3,r3,-128
 4000a68:	2005883a 	mov	r2,r4
 4000a6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000a70:	e0bffe17 	ldw	r2,-8(fp)
 4000a74:	10800d17 	ldw	r2,52(r2)
 4000a78:	10800044 	addi	r2,r2,1
 4000a7c:	10c1ffcc 	andi	r3,r2,2047
 4000a80:	e0bffe17 	ldw	r2,-8(fp)
 4000a84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4000a88:	e0bff917 	ldw	r2,-28(fp)
 4000a8c:	10bfffc4 	addi	r2,r2,-1
 4000a90:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4000a94:	e0bff917 	ldw	r2,-28(fp)
 4000a98:	1005003a 	cmpeq	r2,r2,zero
 4000a9c:	1000051e 	bne	r2,zero,4000ab4 <altera_avalon_jtag_uart_irq+0x1c4>
 4000aa0:	e0bffe17 	ldw	r2,-8(fp)
 4000aa4:	10c00d17 	ldw	r3,52(r2)
 4000aa8:	e0bffe17 	ldw	r2,-8(fp)
 4000aac:	10800c17 	ldw	r2,48(r2)
 4000ab0:	18bfe31e 	bne	r3,r2,4000a40 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4000ab4:	e0bff917 	ldw	r2,-28(fp)
 4000ab8:	1005003a 	cmpeq	r2,r2,zero
 4000abc:	103f961e 	bne	r2,zero,4000918 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000ac0:	e0bffe17 	ldw	r2,-8(fp)
 4000ac4:	10c00817 	ldw	r3,32(r2)
 4000ac8:	00bfff44 	movi	r2,-3
 4000acc:	1886703a 	and	r3,r3,r2
 4000ad0:	e0bffe17 	ldw	r2,-8(fp)
 4000ad4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000ad8:	e0bffe17 	ldw	r2,-8(fp)
 4000adc:	10800017 	ldw	r2,0(r2)
 4000ae0:	11000104 	addi	r4,r2,4
 4000ae4:	e0bffe17 	ldw	r2,-8(fp)
 4000ae8:	10800817 	ldw	r2,32(r2)
 4000aec:	1007883a 	mov	r3,r2
 4000af0:	2005883a 	mov	r2,r4
 4000af4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000af8:	e0bffd17 	ldw	r2,-12(fp)
 4000afc:	10800104 	addi	r2,r2,4
 4000b00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4000b04:	003f8406 	br	4000918 <altera_avalon_jtag_uart_irq+0x28>
}
 4000b08:	e037883a 	mov	sp,fp
 4000b0c:	df000017 	ldw	fp,0(sp)
 4000b10:	dec00104 	addi	sp,sp,4
 4000b14:	f800283a 	ret

04000b18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4000b18:	defffc04 	addi	sp,sp,-16
 4000b1c:	df000315 	stw	fp,12(sp)
 4000b20:	df000304 	addi	fp,sp,12
 4000b24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4000b28:	e0bfff17 	ldw	r2,-4(fp)
 4000b2c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4000b30:	e0bffe17 	ldw	r2,-8(fp)
 4000b34:	10800017 	ldw	r2,0(r2)
 4000b38:	10800104 	addi	r2,r2,4
 4000b3c:	10800037 	ldwio	r2,0(r2)
 4000b40:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4000b44:	e0bffd17 	ldw	r2,-12(fp)
 4000b48:	1081000c 	andi	r2,r2,1024
 4000b4c:	1005003a 	cmpeq	r2,r2,zero
 4000b50:	10000c1e 	bne	r2,zero,4000b84 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4000b54:	e0bffe17 	ldw	r2,-8(fp)
 4000b58:	10800017 	ldw	r2,0(r2)
 4000b5c:	11000104 	addi	r4,r2,4
 4000b60:	e0bffe17 	ldw	r2,-8(fp)
 4000b64:	10800817 	ldw	r2,32(r2)
 4000b68:	10810014 	ori	r2,r2,1024
 4000b6c:	1007883a 	mov	r3,r2
 4000b70:	2005883a 	mov	r2,r4
 4000b74:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4000b78:	e0bffe17 	ldw	r2,-8(fp)
 4000b7c:	10000915 	stw	zero,36(r2)
 4000b80:	00000a06 	br	4000bac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4000b84:	e0bffe17 	ldw	r2,-8(fp)
 4000b88:	10c00917 	ldw	r3,36(r2)
 4000b8c:	00a00034 	movhi	r2,32768
 4000b90:	10bfff04 	addi	r2,r2,-4
 4000b94:	10c00536 	bltu	r2,r3,4000bac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 4000b98:	e0bffe17 	ldw	r2,-8(fp)
 4000b9c:	10800917 	ldw	r2,36(r2)
 4000ba0:	10c00044 	addi	r3,r2,1
 4000ba4:	e0bffe17 	ldw	r2,-8(fp)
 4000ba8:	10c00915 	stw	r3,36(r2)
 4000bac:	00810034 	movhi	r2,1024
 4000bb0:	10954204 	addi	r2,r2,21768
 4000bb4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4000bb8:	e037883a 	mov	sp,fp
 4000bbc:	df000017 	ldw	fp,0(sp)
 4000bc0:	dec00104 	addi	sp,sp,4
 4000bc4:	f800283a 	ret

04000bc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4000bc8:	defffc04 	addi	sp,sp,-16
 4000bcc:	df000315 	stw	fp,12(sp)
 4000bd0:	df000304 	addi	fp,sp,12
 4000bd4:	e13ffd15 	stw	r4,-12(fp)
 4000bd8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000bdc:	00000706 	br	4000bfc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 4000be0:	e0bffe17 	ldw	r2,-8(fp)
 4000be4:	1090000c 	andi	r2,r2,16384
 4000be8:	1005003a 	cmpeq	r2,r2,zero
 4000bec:	1000031e 	bne	r2,zero,4000bfc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 4000bf0:	00bffd44 	movi	r2,-11
 4000bf4:	e0bfff15 	stw	r2,-4(fp)
 4000bf8:	00000b06 	br	4000c28 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000bfc:	e0bffd17 	ldw	r2,-12(fp)
 4000c00:	10c00d17 	ldw	r3,52(r2)
 4000c04:	e0bffd17 	ldw	r2,-12(fp)
 4000c08:	10800c17 	ldw	r2,48(r2)
 4000c0c:	18800526 	beq	r3,r2,4000c24 <altera_avalon_jtag_uart_close+0x5c>
 4000c10:	e0bffd17 	ldw	r2,-12(fp)
 4000c14:	10c00917 	ldw	r3,36(r2)
 4000c18:	e0bffd17 	ldw	r2,-12(fp)
 4000c1c:	10800117 	ldw	r2,4(r2)
 4000c20:	18bfef36 	bltu	r3,r2,4000be0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4000c24:	e03fff15 	stw	zero,-4(fp)
 4000c28:	e0bfff17 	ldw	r2,-4(fp)
}
 4000c2c:	e037883a 	mov	sp,fp
 4000c30:	df000017 	ldw	fp,0(sp)
 4000c34:	dec00104 	addi	sp,sp,4
 4000c38:	f800283a 	ret

04000c3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4000c3c:	defff804 	addi	sp,sp,-32
 4000c40:	df000715 	stw	fp,28(sp)
 4000c44:	df000704 	addi	fp,sp,28
 4000c48:	e13ffb15 	stw	r4,-20(fp)
 4000c4c:	e17ffc15 	stw	r5,-16(fp)
 4000c50:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 4000c54:	00bff9c4 	movi	r2,-25
 4000c58:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 4000c5c:	e0bffc17 	ldw	r2,-16(fp)
 4000c60:	e0bfff15 	stw	r2,-4(fp)
 4000c64:	e0ffff17 	ldw	r3,-4(fp)
 4000c68:	189a8060 	cmpeqi	r2,r3,27137
 4000c6c:	1000041e 	bne	r2,zero,4000c80 <altera_avalon_jtag_uart_ioctl+0x44>
 4000c70:	e0ffff17 	ldw	r3,-4(fp)
 4000c74:	189a80a0 	cmpeqi	r2,r3,27138
 4000c78:	10001b1e 	bne	r2,zero,4000ce8 <altera_avalon_jtag_uart_ioctl+0xac>
 4000c7c:	00002706 	br	4000d1c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4000c80:	e0bffb17 	ldw	r2,-20(fp)
 4000c84:	10c00117 	ldw	r3,4(r2)
 4000c88:	00a00034 	movhi	r2,32768
 4000c8c:	10bfffc4 	addi	r2,r2,-1
 4000c90:	18802226 	beq	r3,r2,4000d1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4000c94:	e0bffd17 	ldw	r2,-12(fp)
 4000c98:	10800017 	ldw	r2,0(r2)
 4000c9c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4000ca0:	e0bff917 	ldw	r2,-28(fp)
 4000ca4:	10800090 	cmplti	r2,r2,2
 4000ca8:	1000071e 	bne	r2,zero,4000cc8 <altera_avalon_jtag_uart_ioctl+0x8c>
 4000cac:	e0fff917 	ldw	r3,-28(fp)
 4000cb0:	00a00034 	movhi	r2,32768
 4000cb4:	10bfffc4 	addi	r2,r2,-1
 4000cb8:	18800326 	beq	r3,r2,4000cc8 <altera_avalon_jtag_uart_ioctl+0x8c>
 4000cbc:	e0bff917 	ldw	r2,-28(fp)
 4000cc0:	e0bffe15 	stw	r2,-8(fp)
 4000cc4:	00000306 	br	4000cd4 <altera_avalon_jtag_uart_ioctl+0x98>
 4000cc8:	00e00034 	movhi	r3,32768
 4000ccc:	18ffff84 	addi	r3,r3,-2
 4000cd0:	e0fffe15 	stw	r3,-8(fp)
 4000cd4:	e0bffb17 	ldw	r2,-20(fp)
 4000cd8:	e0fffe17 	ldw	r3,-8(fp)
 4000cdc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 4000ce0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4000ce4:	00000d06 	br	4000d1c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4000ce8:	e0bffb17 	ldw	r2,-20(fp)
 4000cec:	10c00117 	ldw	r3,4(r2)
 4000cf0:	00a00034 	movhi	r2,32768
 4000cf4:	10bfffc4 	addi	r2,r2,-1
 4000cf8:	18800826 	beq	r3,r2,4000d1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4000cfc:	e13ffd17 	ldw	r4,-12(fp)
 4000d00:	e0bffb17 	ldw	r2,-20(fp)
 4000d04:	10c00917 	ldw	r3,36(r2)
 4000d08:	e0bffb17 	ldw	r2,-20(fp)
 4000d0c:	10800117 	ldw	r2,4(r2)
 4000d10:	1885803a 	cmpltu	r2,r3,r2
 4000d14:	20800015 	stw	r2,0(r4)
      rc = 0;
 4000d18:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 4000d1c:	e0bffa17 	ldw	r2,-24(fp)
}
 4000d20:	e037883a 	mov	sp,fp
 4000d24:	df000017 	ldw	fp,0(sp)
 4000d28:	dec00104 	addi	sp,sp,4
 4000d2c:	f800283a 	ret

04000d30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4000d30:	defff204 	addi	sp,sp,-56
 4000d34:	dfc00d15 	stw	ra,52(sp)
 4000d38:	df000c15 	stw	fp,48(sp)
 4000d3c:	df000c04 	addi	fp,sp,48
 4000d40:	e13ffb15 	stw	r4,-20(fp)
 4000d44:	e17ffc15 	stw	r5,-16(fp)
 4000d48:	e1bffd15 	stw	r6,-12(fp)
 4000d4c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 4000d50:	e0bffc17 	ldw	r2,-16(fp)
 4000d54:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000d58:	00004806 	br	4000e7c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4000d5c:	e0bffb17 	ldw	r2,-20(fp)
 4000d60:	10800a17 	ldw	r2,40(r2)
 4000d64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4000d68:	e0bffb17 	ldw	r2,-20(fp)
 4000d6c:	10800b17 	ldw	r2,44(r2)
 4000d70:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 4000d74:	e0fff717 	ldw	r3,-36(fp)
 4000d78:	e0bff617 	ldw	r2,-40(fp)
 4000d7c:	18800536 	bltu	r3,r2,4000d94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4000d80:	e0bff717 	ldw	r2,-36(fp)
 4000d84:	e0fff617 	ldw	r3,-40(fp)
 4000d88:	10c5c83a 	sub	r2,r2,r3
 4000d8c:	e0bff815 	stw	r2,-32(fp)
 4000d90:	00000406 	br	4000da4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4000d94:	00820004 	movi	r2,2048
 4000d98:	e0fff617 	ldw	r3,-40(fp)
 4000d9c:	10c5c83a 	sub	r2,r2,r3
 4000da0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4000da4:	e0bff817 	ldw	r2,-32(fp)
 4000da8:	1005003a 	cmpeq	r2,r2,zero
 4000dac:	10001f1e 	bne	r2,zero,4000e2c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 4000db0:	e0fffd17 	ldw	r3,-12(fp)
 4000db4:	e0bff817 	ldw	r2,-32(fp)
 4000db8:	1880022e 	bgeu	r3,r2,4000dc4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 4000dbc:	e0bffd17 	ldw	r2,-12(fp)
 4000dc0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4000dc4:	e0bffb17 	ldw	r2,-20(fp)
 4000dc8:	10c00e04 	addi	r3,r2,56
 4000dcc:	e0bff617 	ldw	r2,-40(fp)
 4000dd0:	1887883a 	add	r3,r3,r2
 4000dd4:	e0bffa17 	ldw	r2,-24(fp)
 4000dd8:	1009883a 	mov	r4,r2
 4000ddc:	180b883a 	mov	r5,r3
 4000de0:	e1bff817 	ldw	r6,-32(fp)
 4000de4:	40023080 	call	4002308 <memcpy>
      ptr   += n;
 4000de8:	e0fff817 	ldw	r3,-32(fp)
 4000dec:	e0bffa17 	ldw	r2,-24(fp)
 4000df0:	10c5883a 	add	r2,r2,r3
 4000df4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 4000df8:	e0fffd17 	ldw	r3,-12(fp)
 4000dfc:	e0bff817 	ldw	r2,-32(fp)
 4000e00:	1885c83a 	sub	r2,r3,r2
 4000e04:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000e08:	e0fff617 	ldw	r3,-40(fp)
 4000e0c:	e0bff817 	ldw	r2,-32(fp)
 4000e10:	1885883a 	add	r2,r3,r2
 4000e14:	10c1ffcc 	andi	r3,r2,2047
 4000e18:	e0bffb17 	ldw	r2,-20(fp)
 4000e1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4000e20:	e0bffd17 	ldw	r2,-12(fp)
 4000e24:	10800048 	cmpgei	r2,r2,1
 4000e28:	103fcc1e 	bne	r2,zero,4000d5c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 4000e2c:	e0fffa17 	ldw	r3,-24(fp)
 4000e30:	e0bffc17 	ldw	r2,-16(fp)
 4000e34:	1880141e 	bne	r3,r2,4000e88 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4000e38:	e0bffe17 	ldw	r2,-8(fp)
 4000e3c:	1090000c 	andi	r2,r2,16384
 4000e40:	1004c03a 	cmpne	r2,r2,zero
 4000e44:	1000101e 	bne	r2,zero,4000e88 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4000e48:	e0bffb17 	ldw	r2,-20(fp)
 4000e4c:	10c00a17 	ldw	r3,40(r2)
 4000e50:	e0bff717 	ldw	r2,-36(fp)
 4000e54:	1880051e 	bne	r3,r2,4000e6c <altera_avalon_jtag_uart_read+0x13c>
 4000e58:	e0bffb17 	ldw	r2,-20(fp)
 4000e5c:	10c00917 	ldw	r3,36(r2)
 4000e60:	e0bffb17 	ldw	r2,-20(fp)
 4000e64:	10800117 	ldw	r2,4(r2)
 4000e68:	18bff736 	bltu	r3,r2,4000e48 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4000e6c:	e0bffb17 	ldw	r2,-20(fp)
 4000e70:	10c00a17 	ldw	r3,40(r2)
 4000e74:	e0bff717 	ldw	r2,-36(fp)
 4000e78:	18800326 	beq	r3,r2,4000e88 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000e7c:	e0bffd17 	ldw	r2,-12(fp)
 4000e80:	10800048 	cmpgei	r2,r2,1
 4000e84:	103fb51e 	bne	r2,zero,4000d5c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4000e88:	e0fffa17 	ldw	r3,-24(fp)
 4000e8c:	e0bffc17 	ldw	r2,-16(fp)
 4000e90:	18801926 	beq	r3,r2,4000ef8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000e94:	0005303a 	rdctl	r2,status
 4000e98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000e9c:	e0fff517 	ldw	r3,-44(fp)
 4000ea0:	00bfff84 	movi	r2,-2
 4000ea4:	1884703a 	and	r2,r3,r2
 4000ea8:	1001703a 	wrctl	status,r2
  
  return context;
 4000eac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4000eb0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000eb4:	e0bffb17 	ldw	r2,-20(fp)
 4000eb8:	10800817 	ldw	r2,32(r2)
 4000ebc:	10c00054 	ori	r3,r2,1
 4000ec0:	e0bffb17 	ldw	r2,-20(fp)
 4000ec4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000ec8:	e0bffb17 	ldw	r2,-20(fp)
 4000ecc:	10800017 	ldw	r2,0(r2)
 4000ed0:	11000104 	addi	r4,r2,4
 4000ed4:	e0bffb17 	ldw	r2,-20(fp)
 4000ed8:	10800817 	ldw	r2,32(r2)
 4000edc:	1007883a 	mov	r3,r2
 4000ee0:	2005883a 	mov	r2,r4
 4000ee4:	10c00035 	stwio	r3,0(r2)
 4000ee8:	e0bff917 	ldw	r2,-28(fp)
 4000eec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ef0:	e0bff417 	ldw	r2,-48(fp)
 4000ef4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4000ef8:	e0fffa17 	ldw	r3,-24(fp)
 4000efc:	e0bffc17 	ldw	r2,-16(fp)
 4000f00:	18800526 	beq	r3,r2,4000f18 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 4000f04:	e0fffa17 	ldw	r3,-24(fp)
 4000f08:	e0bffc17 	ldw	r2,-16(fp)
 4000f0c:	1887c83a 	sub	r3,r3,r2
 4000f10:	e0ffff15 	stw	r3,-4(fp)
 4000f14:	00000906 	br	4000f3c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4000f18:	e0bffe17 	ldw	r2,-8(fp)
 4000f1c:	1090000c 	andi	r2,r2,16384
 4000f20:	1005003a 	cmpeq	r2,r2,zero
 4000f24:	1000031e 	bne	r2,zero,4000f34 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4000f28:	00bffd44 	movi	r2,-11
 4000f2c:	e0bfff15 	stw	r2,-4(fp)
 4000f30:	00000206 	br	4000f3c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4000f34:	00bffec4 	movi	r2,-5
 4000f38:	e0bfff15 	stw	r2,-4(fp)
 4000f3c:	e0bfff17 	ldw	r2,-4(fp)
}
 4000f40:	e037883a 	mov	sp,fp
 4000f44:	dfc00117 	ldw	ra,4(sp)
 4000f48:	df000017 	ldw	fp,0(sp)
 4000f4c:	dec00204 	addi	sp,sp,8
 4000f50:	f800283a 	ret

04000f54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000f54:	defff204 	addi	sp,sp,-56
 4000f58:	dfc00d15 	stw	ra,52(sp)
 4000f5c:	df000c15 	stw	fp,48(sp)
 4000f60:	df000c04 	addi	fp,sp,48
 4000f64:	e13ffb15 	stw	r4,-20(fp)
 4000f68:	e17ffc15 	stw	r5,-16(fp)
 4000f6c:	e1bffd15 	stw	r6,-12(fp)
 4000f70:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4000f74:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4000f78:	e0bffc17 	ldw	r2,-16(fp)
 4000f7c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000f80:	00003a06 	br	400106c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4000f84:	e0bffb17 	ldw	r2,-20(fp)
 4000f88:	10800c17 	ldw	r2,48(r2)
 4000f8c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 4000f90:	e0bffb17 	ldw	r2,-20(fp)
 4000f94:	10800d17 	ldw	r2,52(r2)
 4000f98:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 4000f9c:	e0fffa17 	ldw	r3,-24(fp)
 4000fa0:	e0bff917 	ldw	r2,-28(fp)
 4000fa4:	1880062e 	bgeu	r3,r2,4000fc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4000fa8:	e0fff917 	ldw	r3,-28(fp)
 4000fac:	e0bffa17 	ldw	r2,-24(fp)
 4000fb0:	1885c83a 	sub	r2,r3,r2
 4000fb4:	10bfffc4 	addi	r2,r2,-1
 4000fb8:	e0bff815 	stw	r2,-32(fp)
 4000fbc:	00000c06 	br	4000ff0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 4000fc0:	e0bff917 	ldw	r2,-28(fp)
 4000fc4:	1005003a 	cmpeq	r2,r2,zero
 4000fc8:	1000051e 	bne	r2,zero,4000fe0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4000fcc:	00820004 	movi	r2,2048
 4000fd0:	e0fffa17 	ldw	r3,-24(fp)
 4000fd4:	10c5c83a 	sub	r2,r2,r3
 4000fd8:	e0bff815 	stw	r2,-32(fp)
 4000fdc:	00000406 	br	4000ff0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4000fe0:	0081ffc4 	movi	r2,2047
 4000fe4:	e0fffa17 	ldw	r3,-24(fp)
 4000fe8:	10c5c83a 	sub	r2,r2,r3
 4000fec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4000ff0:	e0bff817 	ldw	r2,-32(fp)
 4000ff4:	1005003a 	cmpeq	r2,r2,zero
 4000ff8:	10001f1e 	bne	r2,zero,4001078 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 4000ffc:	e0fffd17 	ldw	r3,-12(fp)
 4001000:	e0bff817 	ldw	r2,-32(fp)
 4001004:	1880022e 	bgeu	r3,r2,4001010 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 4001008:	e0bffd17 	ldw	r2,-12(fp)
 400100c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4001010:	e0bffb17 	ldw	r2,-20(fp)
 4001014:	10c20e04 	addi	r3,r2,2104
 4001018:	e0bffa17 	ldw	r2,-24(fp)
 400101c:	1885883a 	add	r2,r3,r2
 4001020:	e0fffc17 	ldw	r3,-16(fp)
 4001024:	1009883a 	mov	r4,r2
 4001028:	180b883a 	mov	r5,r3
 400102c:	e1bff817 	ldw	r6,-32(fp)
 4001030:	40023080 	call	4002308 <memcpy>
      ptr   += n;
 4001034:	e0fff817 	ldw	r3,-32(fp)
 4001038:	e0bffc17 	ldw	r2,-16(fp)
 400103c:	10c5883a 	add	r2,r2,r3
 4001040:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 4001044:	e0fffd17 	ldw	r3,-12(fp)
 4001048:	e0bff817 	ldw	r2,-32(fp)
 400104c:	1885c83a 	sub	r2,r3,r2
 4001050:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4001054:	e0fffa17 	ldw	r3,-24(fp)
 4001058:	e0bff817 	ldw	r2,-32(fp)
 400105c:	1885883a 	add	r2,r3,r2
 4001060:	10c1ffcc 	andi	r3,r2,2047
 4001064:	e0bffb17 	ldw	r2,-20(fp)
 4001068:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400106c:	e0bffd17 	ldw	r2,-12(fp)
 4001070:	10800048 	cmpgei	r2,r2,1
 4001074:	103fc31e 	bne	r2,zero,4000f84 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001078:	0005303a 	rdctl	r2,status
 400107c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001080:	e0fff517 	ldw	r3,-44(fp)
 4001084:	00bfff84 	movi	r2,-2
 4001088:	1884703a 	and	r2,r3,r2
 400108c:	1001703a 	wrctl	status,r2
  
  return context;
 4001090:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4001094:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4001098:	e0bffb17 	ldw	r2,-20(fp)
 400109c:	10800817 	ldw	r2,32(r2)
 40010a0:	10c00094 	ori	r3,r2,2
 40010a4:	e0bffb17 	ldw	r2,-20(fp)
 40010a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40010ac:	e0bffb17 	ldw	r2,-20(fp)
 40010b0:	10800017 	ldw	r2,0(r2)
 40010b4:	11000104 	addi	r4,r2,4
 40010b8:	e0bffb17 	ldw	r2,-20(fp)
 40010bc:	10800817 	ldw	r2,32(r2)
 40010c0:	1007883a 	mov	r3,r2
 40010c4:	2005883a 	mov	r2,r4
 40010c8:	10c00035 	stwio	r3,0(r2)
 40010cc:	e0bff717 	ldw	r2,-36(fp)
 40010d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40010d4:	e0bff417 	ldw	r2,-48(fp)
 40010d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40010dc:	e0bffd17 	ldw	r2,-12(fp)
 40010e0:	10800050 	cmplti	r2,r2,1
 40010e4:	1000111e 	bne	r2,zero,400112c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 40010e8:	e0bffe17 	ldw	r2,-8(fp)
 40010ec:	1090000c 	andi	r2,r2,16384
 40010f0:	1004c03a 	cmpne	r2,r2,zero
 40010f4:	1000101e 	bne	r2,zero,4001138 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40010f8:	e0bffb17 	ldw	r2,-20(fp)
 40010fc:	10c00d17 	ldw	r3,52(r2)
 4001100:	e0bff917 	ldw	r2,-28(fp)
 4001104:	1880051e 	bne	r3,r2,400111c <altera_avalon_jtag_uart_write+0x1c8>
 4001108:	e0bffb17 	ldw	r2,-20(fp)
 400110c:	10c00917 	ldw	r3,36(r2)
 4001110:	e0bffb17 	ldw	r2,-20(fp)
 4001114:	10800117 	ldw	r2,4(r2)
 4001118:	18bff736 	bltu	r3,r2,40010f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 400111c:	e0bffb17 	ldw	r2,-20(fp)
 4001120:	10c00d17 	ldw	r3,52(r2)
 4001124:	e0bff917 	ldw	r2,-28(fp)
 4001128:	18800326 	beq	r3,r2,4001138 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 400112c:	e0bffd17 	ldw	r2,-12(fp)
 4001130:	10800048 	cmpgei	r2,r2,1
 4001134:	103fcd1e 	bne	r2,zero,400106c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4001138:	e0fffc17 	ldw	r3,-16(fp)
 400113c:	e0bff617 	ldw	r2,-40(fp)
 4001140:	18800526 	beq	r3,r2,4001158 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 4001144:	e0fffc17 	ldw	r3,-16(fp)
 4001148:	e0bff617 	ldw	r2,-40(fp)
 400114c:	1887c83a 	sub	r3,r3,r2
 4001150:	e0ffff15 	stw	r3,-4(fp)
 4001154:	00000906 	br	400117c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 4001158:	e0bffe17 	ldw	r2,-8(fp)
 400115c:	1090000c 	andi	r2,r2,16384
 4001160:	1005003a 	cmpeq	r2,r2,zero
 4001164:	1000031e 	bne	r2,zero,4001174 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 4001168:	00bffd44 	movi	r2,-11
 400116c:	e0bfff15 	stw	r2,-4(fp)
 4001170:	00000206 	br	400117c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4001174:	00bffec4 	movi	r2,-5
 4001178:	e0bfff15 	stw	r2,-4(fp)
 400117c:	e0bfff17 	ldw	r2,-4(fp)
}
 4001180:	e037883a 	mov	sp,fp
 4001184:	dfc00117 	ldw	ra,4(sp)
 4001188:	df000017 	ldw	fp,0(sp)
 400118c:	dec00204 	addi	sp,sp,8
 4001190:	f800283a 	ret

04001194 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4001194:	defff404 	addi	sp,sp,-48
 4001198:	df000b15 	stw	fp,44(sp)
 400119c:	df000b04 	addi	fp,sp,44
 40011a0:	e13ffb15 	stw	r4,-20(fp)
 40011a4:	e17ffc15 	stw	r5,-16(fp)
 40011a8:	e1bffd15 	stw	r6,-12(fp)
 40011ac:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40011b0:	e03ff915 	stw	zero,-28(fp)
 40011b4:	00810034 	movhi	r2,1024
 40011b8:	10954204 	addi	r2,r2,21768
 40011bc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 40011c0:	1005003a 	cmpeq	r2,r2,zero
 40011c4:	1000411e 	bne	r2,zero,40012cc <alt_alarm_start+0x138>
  {
    if (alarm)
 40011c8:	e0bffb17 	ldw	r2,-20(fp)
 40011cc:	1005003a 	cmpeq	r2,r2,zero
 40011d0:	10003b1e 	bne	r2,zero,40012c0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 40011d4:	e0fffb17 	ldw	r3,-20(fp)
 40011d8:	e0bffd17 	ldw	r2,-12(fp)
 40011dc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 40011e0:	e0fffb17 	ldw	r3,-20(fp)
 40011e4:	e0bffe17 	ldw	r2,-8(fp)
 40011e8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40011ec:	0005303a 	rdctl	r2,status
 40011f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40011f4:	e0fff817 	ldw	r3,-32(fp)
 40011f8:	00bfff84 	movi	r2,-2
 40011fc:	1884703a 	and	r2,r3,r2
 4001200:	1001703a 	wrctl	status,r2
  
  return context;
 4001204:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4001208:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400120c:	00810034 	movhi	r2,1024
 4001210:	10954304 	addi	r2,r2,21772
 4001214:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4001218:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400121c:	e0fffc17 	ldw	r3,-16(fp)
 4001220:	e0bff917 	ldw	r2,-28(fp)
 4001224:	1885883a 	add	r2,r3,r2
 4001228:	10c00044 	addi	r3,r2,1
 400122c:	e0bffb17 	ldw	r2,-20(fp)
 4001230:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4001234:	e0bffb17 	ldw	r2,-20(fp)
 4001238:	10c00217 	ldw	r3,8(r2)
 400123c:	e0bff917 	ldw	r2,-28(fp)
 4001240:	1880042e 	bgeu	r3,r2,4001254 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4001244:	e0fffb17 	ldw	r3,-20(fp)
 4001248:	00800044 	movi	r2,1
 400124c:	18800405 	stb	r2,16(r3)
 4001250:	00000206 	br	400125c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4001254:	e0bffb17 	ldw	r2,-20(fp)
 4001258:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400125c:	e0fffb17 	ldw	r3,-20(fp)
 4001260:	00810034 	movhi	r2,1024
 4001264:	108f9804 	addi	r2,r2,15968
 4001268:	e0bff615 	stw	r2,-40(fp)
 400126c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001270:	e0fff717 	ldw	r3,-36(fp)
 4001274:	e0bff617 	ldw	r2,-40(fp)
 4001278:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 400127c:	e0bff617 	ldw	r2,-40(fp)
 4001280:	10c00017 	ldw	r3,0(r2)
 4001284:	e0bff717 	ldw	r2,-36(fp)
 4001288:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400128c:	e0bff617 	ldw	r2,-40(fp)
 4001290:	10c00017 	ldw	r3,0(r2)
 4001294:	e0bff717 	ldw	r2,-36(fp)
 4001298:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400129c:	e0fff617 	ldw	r3,-40(fp)
 40012a0:	e0bff717 	ldw	r2,-36(fp)
 40012a4:	18800015 	stw	r2,0(r3)
 40012a8:	e0bffa17 	ldw	r2,-24(fp)
 40012ac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40012b0:	e0bff517 	ldw	r2,-44(fp)
 40012b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40012b8:	e03fff15 	stw	zero,-4(fp)
 40012bc:	00000506 	br	40012d4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 40012c0:	00bffa84 	movi	r2,-22
 40012c4:	e0bfff15 	stw	r2,-4(fp)
 40012c8:	00000206 	br	40012d4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 40012cc:	00bfde84 	movi	r2,-134
 40012d0:	e0bfff15 	stw	r2,-4(fp)
 40012d4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40012d8:	e037883a 	mov	sp,fp
 40012dc:	df000017 	ldw	fp,0(sp)
 40012e0:	dec00104 	addi	sp,sp,4
 40012e4:	f800283a 	ret

040012e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40012e8:	defff804 	addi	sp,sp,-32
 40012ec:	dfc00715 	stw	ra,28(sp)
 40012f0:	df000615 	stw	fp,24(sp)
 40012f4:	df000604 	addi	fp,sp,24
 40012f8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40012fc:	e0bffc17 	ldw	r2,-16(fp)
 4001300:	1004803a 	cmplt	r2,r2,zero
 4001304:	1000091e 	bne	r2,zero,400132c <close+0x44>
 4001308:	e13ffc17 	ldw	r4,-16(fp)
 400130c:	01400304 	movi	r5,12
 4001310:	40027040 	call	4002704 <__mulsi3>
 4001314:	1007883a 	mov	r3,r2
 4001318:	00810034 	movhi	r2,1024
 400131c:	108e3104 	addi	r2,r2,14532
 4001320:	1887883a 	add	r3,r3,r2
 4001324:	e0ffff15 	stw	r3,-4(fp)
 4001328:	00000106 	br	4001330 <close+0x48>
 400132c:	e03fff15 	stw	zero,-4(fp)
 4001330:	e0bfff17 	ldw	r2,-4(fp)
 4001334:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4001338:	e0bffb17 	ldw	r2,-20(fp)
 400133c:	1005003a 	cmpeq	r2,r2,zero
 4001340:	10001d1e 	bne	r2,zero,40013b8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001344:	e0bffb17 	ldw	r2,-20(fp)
 4001348:	10800017 	ldw	r2,0(r2)
 400134c:	10800417 	ldw	r2,16(r2)
 4001350:	1005003a 	cmpeq	r2,r2,zero
 4001354:	1000071e 	bne	r2,zero,4001374 <close+0x8c>
 4001358:	e0bffb17 	ldw	r2,-20(fp)
 400135c:	10800017 	ldw	r2,0(r2)
 4001360:	10800417 	ldw	r2,16(r2)
 4001364:	e13ffb17 	ldw	r4,-20(fp)
 4001368:	103ee83a 	callr	r2
 400136c:	e0bffe15 	stw	r2,-8(fp)
 4001370:	00000106 	br	4001378 <close+0x90>
 4001374:	e03ffe15 	stw	zero,-8(fp)
 4001378:	e0bffe17 	ldw	r2,-8(fp)
 400137c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001380:	e13ffc17 	ldw	r4,-16(fp)
 4001384:	4001d880 	call	4001d88 <alt_release_fd>
    if (rval < 0)
 4001388:	e0bffa17 	ldw	r2,-24(fp)
 400138c:	1004403a 	cmpge	r2,r2,zero
 4001390:	1000071e 	bne	r2,zero,40013b0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 4001394:	40013e80 	call	40013e8 <alt_get_errno>
 4001398:	e0fffa17 	ldw	r3,-24(fp)
 400139c:	00c7c83a 	sub	r3,zero,r3
 40013a0:	10c00015 	stw	r3,0(r2)
      return -1;
 40013a4:	00bfffc4 	movi	r2,-1
 40013a8:	e0bffd15 	stw	r2,-12(fp)
 40013ac:	00000806 	br	40013d0 <close+0xe8>
    }
    return 0;
 40013b0:	e03ffd15 	stw	zero,-12(fp)
 40013b4:	00000606 	br	40013d0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40013b8:	40013e80 	call	40013e8 <alt_get_errno>
 40013bc:	1007883a 	mov	r3,r2
 40013c0:	00801444 	movi	r2,81
 40013c4:	18800015 	stw	r2,0(r3)
    return -1;
 40013c8:	00bfffc4 	movi	r2,-1
 40013cc:	e0bffd15 	stw	r2,-12(fp)
 40013d0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 40013d4:	e037883a 	mov	sp,fp
 40013d8:	dfc00117 	ldw	ra,4(sp)
 40013dc:	df000017 	ldw	fp,0(sp)
 40013e0:	dec00204 	addi	sp,sp,8
 40013e4:	f800283a 	ret

040013e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40013e8:	defffd04 	addi	sp,sp,-12
 40013ec:	dfc00215 	stw	ra,8(sp)
 40013f0:	df000115 	stw	fp,4(sp)
 40013f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40013f8:	00810034 	movhi	r2,1024
 40013fc:	108f9604 	addi	r2,r2,15960
 4001400:	10800017 	ldw	r2,0(r2)
 4001404:	1005003a 	cmpeq	r2,r2,zero
 4001408:	1000061e 	bne	r2,zero,4001424 <alt_get_errno+0x3c>
 400140c:	00810034 	movhi	r2,1024
 4001410:	108f9604 	addi	r2,r2,15960
 4001414:	10800017 	ldw	r2,0(r2)
 4001418:	103ee83a 	callr	r2
 400141c:	e0bfff15 	stw	r2,-4(fp)
 4001420:	00000306 	br	4001430 <alt_get_errno+0x48>
 4001424:	00810034 	movhi	r2,1024
 4001428:	10954404 	addi	r2,r2,21776
 400142c:	e0bfff15 	stw	r2,-4(fp)
 4001430:	e0bfff17 	ldw	r2,-4(fp)
}
 4001434:	e037883a 	mov	sp,fp
 4001438:	dfc00117 	ldw	ra,4(sp)
 400143c:	df000017 	ldw	fp,0(sp)
 4001440:	dec00204 	addi	sp,sp,8
 4001444:	f800283a 	ret

04001448 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4001448:	deffff04 	addi	sp,sp,-4
 400144c:	df000015 	stw	fp,0(sp)
 4001450:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001454:	e037883a 	mov	sp,fp
 4001458:	df000017 	ldw	fp,0(sp)
 400145c:	dec00104 	addi	sp,sp,4
 4001460:	f800283a 	ret

04001464 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4001464:	defffc04 	addi	sp,sp,-16
 4001468:	df000315 	stw	fp,12(sp)
 400146c:	df000304 	addi	fp,sp,12
 4001470:	e13ffd15 	stw	r4,-12(fp)
 4001474:	e17ffe15 	stw	r5,-8(fp)
 4001478:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400147c:	e0bfff17 	ldw	r2,-4(fp)
}
 4001480:	e037883a 	mov	sp,fp
 4001484:	df000017 	ldw	fp,0(sp)
 4001488:	dec00104 	addi	sp,sp,4
 400148c:	f800283a 	ret

04001490 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001490:	defff904 	addi	sp,sp,-28
 4001494:	dfc00615 	stw	ra,24(sp)
 4001498:	df000515 	stw	fp,20(sp)
 400149c:	df000504 	addi	fp,sp,20
 40014a0:	e13ffd15 	stw	r4,-12(fp)
 40014a4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40014a8:	e0bffd17 	ldw	r2,-12(fp)
 40014ac:	1005003a 	cmpeq	r2,r2,zero
 40014b0:	1000041e 	bne	r2,zero,40014c4 <alt_dev_llist_insert+0x34>
 40014b4:	e0bffd17 	ldw	r2,-12(fp)
 40014b8:	10800217 	ldw	r2,8(r2)
 40014bc:	1004c03a 	cmpne	r2,r2,zero
 40014c0:	1000071e 	bne	r2,zero,40014e0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 40014c4:	40015440 	call	4001544 <alt_get_errno>
 40014c8:	1007883a 	mov	r3,r2
 40014cc:	00800584 	movi	r2,22
 40014d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40014d4:	00bffa84 	movi	r2,-22
 40014d8:	e0bfff15 	stw	r2,-4(fp)
 40014dc:	00001306 	br	400152c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40014e0:	e0fffd17 	ldw	r3,-12(fp)
 40014e4:	e0bffe17 	ldw	r2,-8(fp)
 40014e8:	e0bffb15 	stw	r2,-20(fp)
 40014ec:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40014f0:	e0fffc17 	ldw	r3,-16(fp)
 40014f4:	e0bffb17 	ldw	r2,-20(fp)
 40014f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 40014fc:	e0bffb17 	ldw	r2,-20(fp)
 4001500:	10c00017 	ldw	r3,0(r2)
 4001504:	e0bffc17 	ldw	r2,-16(fp)
 4001508:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400150c:	e0bffb17 	ldw	r2,-20(fp)
 4001510:	10c00017 	ldw	r3,0(r2)
 4001514:	e0bffc17 	ldw	r2,-16(fp)
 4001518:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400151c:	e0fffb17 	ldw	r3,-20(fp)
 4001520:	e0bffc17 	ldw	r2,-16(fp)
 4001524:	18800015 	stw	r2,0(r3)

  return 0;  
 4001528:	e03fff15 	stw	zero,-4(fp)
 400152c:	e0bfff17 	ldw	r2,-4(fp)
}
 4001530:	e037883a 	mov	sp,fp
 4001534:	dfc00117 	ldw	ra,4(sp)
 4001538:	df000017 	ldw	fp,0(sp)
 400153c:	dec00204 	addi	sp,sp,8
 4001540:	f800283a 	ret

04001544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001544:	defffd04 	addi	sp,sp,-12
 4001548:	dfc00215 	stw	ra,8(sp)
 400154c:	df000115 	stw	fp,4(sp)
 4001550:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4001554:	00810034 	movhi	r2,1024
 4001558:	108f9604 	addi	r2,r2,15960
 400155c:	10800017 	ldw	r2,0(r2)
 4001560:	1005003a 	cmpeq	r2,r2,zero
 4001564:	1000061e 	bne	r2,zero,4001580 <alt_get_errno+0x3c>
 4001568:	00810034 	movhi	r2,1024
 400156c:	108f9604 	addi	r2,r2,15960
 4001570:	10800017 	ldw	r2,0(r2)
 4001574:	103ee83a 	callr	r2
 4001578:	e0bfff15 	stw	r2,-4(fp)
 400157c:	00000306 	br	400158c <alt_get_errno+0x48>
 4001580:	00810034 	movhi	r2,1024
 4001584:	10954404 	addi	r2,r2,21776
 4001588:	e0bfff15 	stw	r2,-4(fp)
 400158c:	e0bfff17 	ldw	r2,-4(fp)
}
 4001590:	e037883a 	mov	sp,fp
 4001594:	dfc00117 	ldw	ra,4(sp)
 4001598:	df000017 	ldw	fp,0(sp)
 400159c:	dec00204 	addi	sp,sp,8
 40015a0:	f800283a 	ret

040015a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40015a4:	defffd04 	addi	sp,sp,-12
 40015a8:	dfc00215 	stw	ra,8(sp)
 40015ac:	df000115 	stw	fp,4(sp)
 40015b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40015b4:	00bfff04 	movi	r2,-4
 40015b8:	00c10034 	movhi	r3,1024
 40015bc:	18c9e804 	addi	r3,r3,10144
 40015c0:	1885883a 	add	r2,r3,r2
 40015c4:	e0bfff15 	stw	r2,-4(fp)
 40015c8:	00000606 	br	40015e4 <_do_ctors+0x40>
        (*ctor) (); 
 40015cc:	e0bfff17 	ldw	r2,-4(fp)
 40015d0:	10800017 	ldw	r2,0(r2)
 40015d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40015d8:	e0bfff17 	ldw	r2,-4(fp)
 40015dc:	10bfff04 	addi	r2,r2,-4
 40015e0:	e0bfff15 	stw	r2,-4(fp)
 40015e4:	e0ffff17 	ldw	r3,-4(fp)
 40015e8:	00810034 	movhi	r2,1024
 40015ec:	1089e704 	addi	r2,r2,10140
 40015f0:	18bff62e 	bgeu	r3,r2,40015cc <_do_ctors+0x28>
        (*ctor) (); 
}
 40015f4:	e037883a 	mov	sp,fp
 40015f8:	dfc00117 	ldw	ra,4(sp)
 40015fc:	df000017 	ldw	fp,0(sp)
 4001600:	dec00204 	addi	sp,sp,8
 4001604:	f800283a 	ret

04001608 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4001608:	defffd04 	addi	sp,sp,-12
 400160c:	dfc00215 	stw	ra,8(sp)
 4001610:	df000115 	stw	fp,4(sp)
 4001614:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4001618:	00bfff04 	movi	r2,-4
 400161c:	00c10034 	movhi	r3,1024
 4001620:	18c9e804 	addi	r3,r3,10144
 4001624:	1885883a 	add	r2,r3,r2
 4001628:	e0bfff15 	stw	r2,-4(fp)
 400162c:	00000606 	br	4001648 <_do_dtors+0x40>
        (*dtor) (); 
 4001630:	e0bfff17 	ldw	r2,-4(fp)
 4001634:	10800017 	ldw	r2,0(r2)
 4001638:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400163c:	e0bfff17 	ldw	r2,-4(fp)
 4001640:	10bfff04 	addi	r2,r2,-4
 4001644:	e0bfff15 	stw	r2,-4(fp)
 4001648:	e0ffff17 	ldw	r3,-4(fp)
 400164c:	00810034 	movhi	r2,1024
 4001650:	1089e804 	addi	r2,r2,10144
 4001654:	18bff62e 	bgeu	r3,r2,4001630 <_do_dtors+0x28>
        (*dtor) (); 
}
 4001658:	e037883a 	mov	sp,fp
 400165c:	dfc00117 	ldw	ra,4(sp)
 4001660:	df000017 	ldw	fp,0(sp)
 4001664:	dec00204 	addi	sp,sp,8
 4001668:	f800283a 	ret

0400166c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400166c:	deffff04 	addi	sp,sp,-4
 4001670:	df000015 	stw	fp,0(sp)
 4001674:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4001678:	e037883a 	mov	sp,fp
 400167c:	df000017 	ldw	fp,0(sp)
 4001680:	dec00104 	addi	sp,sp,4
 4001684:	f800283a 	ret

04001688 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4001688:	defff904 	addi	sp,sp,-28
 400168c:	dfc00615 	stw	ra,24(sp)
 4001690:	df000515 	stw	fp,20(sp)
 4001694:	df000504 	addi	fp,sp,20
 4001698:	e13ffc15 	stw	r4,-16(fp)
 400169c:	e17ffd15 	stw	r5,-12(fp)
 40016a0:	e1bffe15 	stw	r6,-8(fp)
 40016a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40016a8:	e0800217 	ldw	r2,8(fp)
 40016ac:	d8800015 	stw	r2,0(sp)
 40016b0:	e13ffc17 	ldw	r4,-16(fp)
 40016b4:	e17ffd17 	ldw	r5,-12(fp)
 40016b8:	e1bffe17 	ldw	r6,-8(fp)
 40016bc:	e1ffff17 	ldw	r7,-4(fp)
 40016c0:	400185c0 	call	400185c <alt_iic_isr_register>
}  
 40016c4:	e037883a 	mov	sp,fp
 40016c8:	dfc00117 	ldw	ra,4(sp)
 40016cc:	df000017 	ldw	fp,0(sp)
 40016d0:	dec00204 	addi	sp,sp,8
 40016d4:	f800283a 	ret

040016d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40016d8:	defff904 	addi	sp,sp,-28
 40016dc:	df000615 	stw	fp,24(sp)
 40016e0:	df000604 	addi	fp,sp,24
 40016e4:	e13ffe15 	stw	r4,-8(fp)
 40016e8:	e17fff15 	stw	r5,-4(fp)
 40016ec:	e0bfff17 	ldw	r2,-4(fp)
 40016f0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40016f4:	0005303a 	rdctl	r2,status
 40016f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40016fc:	e0fffb17 	ldw	r3,-20(fp)
 4001700:	00bfff84 	movi	r2,-2
 4001704:	1884703a 	and	r2,r3,r2
 4001708:	1001703a 	wrctl	status,r2
  
  return context;
 400170c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4001710:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4001714:	e0fffc17 	ldw	r3,-16(fp)
 4001718:	00800044 	movi	r2,1
 400171c:	10c4983a 	sll	r2,r2,r3
 4001720:	1007883a 	mov	r3,r2
 4001724:	00810034 	movhi	r2,1024
 4001728:	10954104 	addi	r2,r2,21764
 400172c:	10800017 	ldw	r2,0(r2)
 4001730:	1886b03a 	or	r3,r3,r2
 4001734:	00810034 	movhi	r2,1024
 4001738:	10954104 	addi	r2,r2,21764
 400173c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4001740:	00810034 	movhi	r2,1024
 4001744:	10954104 	addi	r2,r2,21764
 4001748:	10800017 	ldw	r2,0(r2)
 400174c:	100170fa 	wrctl	ienable,r2
 4001750:	e0bffd17 	ldw	r2,-12(fp)
 4001754:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001758:	e0bffa17 	ldw	r2,-24(fp)
 400175c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4001760:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4001764:	e037883a 	mov	sp,fp
 4001768:	df000017 	ldw	fp,0(sp)
 400176c:	dec00104 	addi	sp,sp,4
 4001770:	f800283a 	ret

04001774 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4001774:	defff904 	addi	sp,sp,-28
 4001778:	df000615 	stw	fp,24(sp)
 400177c:	df000604 	addi	fp,sp,24
 4001780:	e13ffe15 	stw	r4,-8(fp)
 4001784:	e17fff15 	stw	r5,-4(fp)
 4001788:	e0bfff17 	ldw	r2,-4(fp)
 400178c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001790:	0005303a 	rdctl	r2,status
 4001794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001798:	e0fffb17 	ldw	r3,-20(fp)
 400179c:	00bfff84 	movi	r2,-2
 40017a0:	1884703a 	and	r2,r3,r2
 40017a4:	1001703a 	wrctl	status,r2
  
  return context;
 40017a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40017ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 40017b0:	e0fffc17 	ldw	r3,-16(fp)
 40017b4:	00800044 	movi	r2,1
 40017b8:	10c4983a 	sll	r2,r2,r3
 40017bc:	0084303a 	nor	r2,zero,r2
 40017c0:	1007883a 	mov	r3,r2
 40017c4:	00810034 	movhi	r2,1024
 40017c8:	10954104 	addi	r2,r2,21764
 40017cc:	10800017 	ldw	r2,0(r2)
 40017d0:	1886703a 	and	r3,r3,r2
 40017d4:	00810034 	movhi	r2,1024
 40017d8:	10954104 	addi	r2,r2,21764
 40017dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40017e0:	00810034 	movhi	r2,1024
 40017e4:	10954104 	addi	r2,r2,21764
 40017e8:	10800017 	ldw	r2,0(r2)
 40017ec:	100170fa 	wrctl	ienable,r2
 40017f0:	e0bffd17 	ldw	r2,-12(fp)
 40017f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40017f8:	e0bffa17 	ldw	r2,-24(fp)
 40017fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4001800:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4001804:	e037883a 	mov	sp,fp
 4001808:	df000017 	ldw	fp,0(sp)
 400180c:	dec00104 	addi	sp,sp,4
 4001810:	f800283a 	ret

04001814 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4001814:	defffc04 	addi	sp,sp,-16
 4001818:	df000315 	stw	fp,12(sp)
 400181c:	df000304 	addi	fp,sp,12
 4001820:	e13ffe15 	stw	r4,-8(fp)
 4001824:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4001828:	000530fa 	rdctl	r2,ienable
 400182c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4001830:	e0ffff17 	ldw	r3,-4(fp)
 4001834:	00800044 	movi	r2,1
 4001838:	10c4983a 	sll	r2,r2,r3
 400183c:	1007883a 	mov	r3,r2
 4001840:	e0bffd17 	ldw	r2,-12(fp)
 4001844:	1884703a 	and	r2,r3,r2
 4001848:	1004c03a 	cmpne	r2,r2,zero
}
 400184c:	e037883a 	mov	sp,fp
 4001850:	df000017 	ldw	fp,0(sp)
 4001854:	dec00104 	addi	sp,sp,4
 4001858:	f800283a 	ret

0400185c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400185c:	defff404 	addi	sp,sp,-48
 4001860:	dfc00b15 	stw	ra,44(sp)
 4001864:	df000a15 	stw	fp,40(sp)
 4001868:	df000a04 	addi	fp,sp,40
 400186c:	e13ffb15 	stw	r4,-20(fp)
 4001870:	e17ffc15 	stw	r5,-16(fp)
 4001874:	e1bffd15 	stw	r6,-12(fp)
 4001878:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 400187c:	00bffa84 	movi	r2,-22
 4001880:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4001884:	e0bffc17 	ldw	r2,-16(fp)
 4001888:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400188c:	e0bff917 	ldw	r2,-28(fp)
 4001890:	10800808 	cmpgei	r2,r2,32
 4001894:	1000291e 	bne	r2,zero,400193c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001898:	0005303a 	rdctl	r2,status
 400189c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40018a0:	e0fff717 	ldw	r3,-36(fp)
 40018a4:	00bfff84 	movi	r2,-2
 40018a8:	1884703a 	and	r2,r3,r2
 40018ac:	1001703a 	wrctl	status,r2
  
  return context;
 40018b0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40018b4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 40018b8:	e0bff917 	ldw	r2,-28(fp)
 40018bc:	00c10034 	movhi	r3,1024
 40018c0:	18d54504 	addi	r3,r3,21780
 40018c4:	100490fa 	slli	r2,r2,3
 40018c8:	10c7883a 	add	r3,r2,r3
 40018cc:	e0bffd17 	ldw	r2,-12(fp)
 40018d0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 40018d4:	e0bff917 	ldw	r2,-28(fp)
 40018d8:	00c10034 	movhi	r3,1024
 40018dc:	18d54504 	addi	r3,r3,21780
 40018e0:	100490fa 	slli	r2,r2,3
 40018e4:	10c5883a 	add	r2,r2,r3
 40018e8:	10c00104 	addi	r3,r2,4
 40018ec:	e0bffe17 	ldw	r2,-8(fp)
 40018f0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40018f4:	e0bffd17 	ldw	r2,-12(fp)
 40018f8:	1005003a 	cmpeq	r2,r2,zero
 40018fc:	1000051e 	bne	r2,zero,4001914 <alt_iic_isr_register+0xb8>
 4001900:	e17ff917 	ldw	r5,-28(fp)
 4001904:	e13ffb17 	ldw	r4,-20(fp)
 4001908:	40016d80 	call	40016d8 <alt_ic_irq_enable>
 400190c:	e0bfff15 	stw	r2,-4(fp)
 4001910:	00000406 	br	4001924 <alt_iic_isr_register+0xc8>
 4001914:	e17ff917 	ldw	r5,-28(fp)
 4001918:	e13ffb17 	ldw	r4,-20(fp)
 400191c:	40017740 	call	4001774 <alt_ic_irq_disable>
 4001920:	e0bfff15 	stw	r2,-4(fp)
 4001924:	e0bfff17 	ldw	r2,-4(fp)
 4001928:	e0bffa15 	stw	r2,-24(fp)
 400192c:	e0bff817 	ldw	r2,-32(fp)
 4001930:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001934:	e0bff617 	ldw	r2,-40(fp)
 4001938:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400193c:	e0bffa17 	ldw	r2,-24(fp)
}
 4001940:	e037883a 	mov	sp,fp
 4001944:	dfc00117 	ldw	ra,4(sp)
 4001948:	df000017 	ldw	fp,0(sp)
 400194c:	dec00204 	addi	sp,sp,8
 4001950:	f800283a 	ret

04001954 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4001954:	defff804 	addi	sp,sp,-32
 4001958:	dfc00715 	stw	ra,28(sp)
 400195c:	df000615 	stw	fp,24(sp)
 4001960:	dc000515 	stw	r16,20(sp)
 4001964:	df000504 	addi	fp,sp,20
 4001968:	e13ffc15 	stw	r4,-16(fp)
 400196c:	e17ffd15 	stw	r5,-12(fp)
 4001970:	e1bffe15 	stw	r6,-8(fp)
 4001974:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4001978:	e13ffd17 	ldw	r4,-12(fp)
 400197c:	e17ffe17 	ldw	r5,-8(fp)
 4001980:	e1bfff17 	ldw	r6,-4(fp)
 4001984:	4001b9c0 	call	4001b9c <open>
 4001988:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400198c:	e0bffb17 	ldw	r2,-20(fp)
 4001990:	1004803a 	cmplt	r2,r2,zero
 4001994:	10001f1e 	bne	r2,zero,4001a14 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4001998:	e13ffb17 	ldw	r4,-20(fp)
 400199c:	04010034 	movhi	r16,1024
 40019a0:	840e3104 	addi	r16,r16,14532
 40019a4:	01400304 	movi	r5,12
 40019a8:	40027040 	call	4002704 <__mulsi3>
 40019ac:	1405883a 	add	r2,r2,r16
 40019b0:	10c00017 	ldw	r3,0(r2)
 40019b4:	e0bffc17 	ldw	r2,-16(fp)
 40019b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40019bc:	e13ffb17 	ldw	r4,-20(fp)
 40019c0:	04010034 	movhi	r16,1024
 40019c4:	840e3104 	addi	r16,r16,14532
 40019c8:	01400304 	movi	r5,12
 40019cc:	40027040 	call	4002704 <__mulsi3>
 40019d0:	1405883a 	add	r2,r2,r16
 40019d4:	10800104 	addi	r2,r2,4
 40019d8:	10c00017 	ldw	r3,0(r2)
 40019dc:	e0bffc17 	ldw	r2,-16(fp)
 40019e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40019e4:	e13ffb17 	ldw	r4,-20(fp)
 40019e8:	04010034 	movhi	r16,1024
 40019ec:	840e3104 	addi	r16,r16,14532
 40019f0:	01400304 	movi	r5,12
 40019f4:	40027040 	call	4002704 <__mulsi3>
 40019f8:	1405883a 	add	r2,r2,r16
 40019fc:	10800204 	addi	r2,r2,8
 4001a00:	10c00017 	ldw	r3,0(r2)
 4001a04:	e0bffc17 	ldw	r2,-16(fp)
 4001a08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4001a0c:	e13ffb17 	ldw	r4,-20(fp)
 4001a10:	4001d880 	call	4001d88 <alt_release_fd>
  }
} 
 4001a14:	e037883a 	mov	sp,fp
 4001a18:	dfc00217 	ldw	ra,8(sp)
 4001a1c:	df000117 	ldw	fp,4(sp)
 4001a20:	dc000017 	ldw	r16,0(sp)
 4001a24:	dec00304 	addi	sp,sp,12
 4001a28:	f800283a 	ret

04001a2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4001a2c:	defffb04 	addi	sp,sp,-20
 4001a30:	dfc00415 	stw	ra,16(sp)
 4001a34:	df000315 	stw	fp,12(sp)
 4001a38:	df000304 	addi	fp,sp,12
 4001a3c:	e13ffd15 	stw	r4,-12(fp)
 4001a40:	e17ffe15 	stw	r5,-8(fp)
 4001a44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001a48:	01010034 	movhi	r4,1024
 4001a4c:	210e3404 	addi	r4,r4,14544
 4001a50:	e17ffd17 	ldw	r5,-12(fp)
 4001a54:	01800044 	movi	r6,1
 4001a58:	01c07fc4 	movi	r7,511
 4001a5c:	40019540 	call	4001954 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4001a60:	01010034 	movhi	r4,1024
 4001a64:	210e3104 	addi	r4,r4,14532
 4001a68:	e17ffe17 	ldw	r5,-8(fp)
 4001a6c:	000d883a 	mov	r6,zero
 4001a70:	01c07fc4 	movi	r7,511
 4001a74:	40019540 	call	4001954 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4001a78:	01010034 	movhi	r4,1024
 4001a7c:	210e3704 	addi	r4,r4,14556
 4001a80:	e17fff17 	ldw	r5,-4(fp)
 4001a84:	01800044 	movi	r6,1
 4001a88:	01c07fc4 	movi	r7,511
 4001a8c:	40019540 	call	4001954 <alt_open_fd>
}  
 4001a90:	e037883a 	mov	sp,fp
 4001a94:	dfc00117 	ldw	ra,4(sp)
 4001a98:	df000017 	ldw	fp,0(sp)
 4001a9c:	dec00204 	addi	sp,sp,8
 4001aa0:	f800283a 	ret

04001aa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4001aa4:	defffa04 	addi	sp,sp,-24
 4001aa8:	dfc00515 	stw	ra,20(sp)
 4001aac:	df000415 	stw	fp,16(sp)
 4001ab0:	dc000315 	stw	r16,12(sp)
 4001ab4:	df000304 	addi	fp,sp,12
 4001ab8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4001abc:	e0bffe17 	ldw	r2,-8(fp)
 4001ac0:	10800217 	ldw	r2,8(r2)
 4001ac4:	10d00034 	orhi	r3,r2,16384
 4001ac8:	e0bffe17 	ldw	r2,-8(fp)
 4001acc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001ad0:	e03ffd15 	stw	zero,-12(fp)
 4001ad4:	00002306 	br	4001b64 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4001ad8:	e13ffd17 	ldw	r4,-12(fp)
 4001adc:	04010034 	movhi	r16,1024
 4001ae0:	840e3104 	addi	r16,r16,14532
 4001ae4:	01400304 	movi	r5,12
 4001ae8:	40027040 	call	4002704 <__mulsi3>
 4001aec:	1405883a 	add	r2,r2,r16
 4001af0:	10c00017 	ldw	r3,0(r2)
 4001af4:	e0bffe17 	ldw	r2,-8(fp)
 4001af8:	10800017 	ldw	r2,0(r2)
 4001afc:	1880161e 	bne	r3,r2,4001b58 <alt_file_locked+0xb4>
 4001b00:	e13ffd17 	ldw	r4,-12(fp)
 4001b04:	04010034 	movhi	r16,1024
 4001b08:	840e3104 	addi	r16,r16,14532
 4001b0c:	01400304 	movi	r5,12
 4001b10:	40027040 	call	4002704 <__mulsi3>
 4001b14:	1405883a 	add	r2,r2,r16
 4001b18:	10800204 	addi	r2,r2,8
 4001b1c:	10800017 	ldw	r2,0(r2)
 4001b20:	1004403a 	cmpge	r2,r2,zero
 4001b24:	10000c1e 	bne	r2,zero,4001b58 <alt_file_locked+0xb4>
 4001b28:	e13ffd17 	ldw	r4,-12(fp)
 4001b2c:	01400304 	movi	r5,12
 4001b30:	40027040 	call	4002704 <__mulsi3>
 4001b34:	1007883a 	mov	r3,r2
 4001b38:	00810034 	movhi	r2,1024
 4001b3c:	108e3104 	addi	r2,r2,14532
 4001b40:	1887883a 	add	r3,r3,r2
 4001b44:	e0bffe17 	ldw	r2,-8(fp)
 4001b48:	18800326 	beq	r3,r2,4001b58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4001b4c:	00bffcc4 	movi	r2,-13
 4001b50:	e0bfff15 	stw	r2,-4(fp)
 4001b54:	00000a06 	br	4001b80 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001b58:	e0bffd17 	ldw	r2,-12(fp)
 4001b5c:	10800044 	addi	r2,r2,1
 4001b60:	e0bffd15 	stw	r2,-12(fp)
 4001b64:	00810034 	movhi	r2,1024
 4001b68:	108f9504 	addi	r2,r2,15956
 4001b6c:	10800017 	ldw	r2,0(r2)
 4001b70:	1007883a 	mov	r3,r2
 4001b74:	e0bffd17 	ldw	r2,-12(fp)
 4001b78:	18bfd72e 	bgeu	r3,r2,4001ad8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4001b7c:	e03fff15 	stw	zero,-4(fp)
 4001b80:	e0bfff17 	ldw	r2,-4(fp)
}
 4001b84:	e037883a 	mov	sp,fp
 4001b88:	dfc00217 	ldw	ra,8(sp)
 4001b8c:	df000117 	ldw	fp,4(sp)
 4001b90:	dc000017 	ldw	r16,0(sp)
 4001b94:	dec00304 	addi	sp,sp,12
 4001b98:	f800283a 	ret

04001b9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4001b9c:	defff404 	addi	sp,sp,-48
 4001ba0:	dfc00b15 	stw	ra,44(sp)
 4001ba4:	df000a15 	stw	fp,40(sp)
 4001ba8:	df000a04 	addi	fp,sp,40
 4001bac:	e13ffb15 	stw	r4,-20(fp)
 4001bb0:	e17ffc15 	stw	r5,-16(fp)
 4001bb4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4001bb8:	00bfffc4 	movi	r2,-1
 4001bbc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4001bc0:	00bffb44 	movi	r2,-19
 4001bc4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4001bc8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4001bcc:	e13ffb17 	ldw	r4,-20(fp)
 4001bd0:	01410034 	movhi	r5,1024
 4001bd4:	294f9304 	addi	r5,r5,15948
 4001bd8:	4001fc40 	call	4001fc4 <alt_find_dev>
 4001bdc:	e0bffa15 	stw	r2,-24(fp)
 4001be0:	e0bffa17 	ldw	r2,-24(fp)
 4001be4:	1004c03a 	cmpne	r2,r2,zero
 4001be8:	1000051e 	bne	r2,zero,4001c00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4001bec:	e13ffb17 	ldw	r4,-20(fp)
 4001bf0:	40020580 	call	4002058 <alt_find_file>
 4001bf4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4001bf8:	00800044 	movi	r2,1
 4001bfc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4001c00:	e0bffa17 	ldw	r2,-24(fp)
 4001c04:	1005003a 	cmpeq	r2,r2,zero
 4001c08:	1000311e 	bne	r2,zero,4001cd0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4001c0c:	e13ffa17 	ldw	r4,-24(fp)
 4001c10:	40021780 	call	4002178 <alt_get_fd>
 4001c14:	e0bff815 	stw	r2,-32(fp)
 4001c18:	e0bff817 	ldw	r2,-32(fp)
 4001c1c:	1004403a 	cmpge	r2,r2,zero
 4001c20:	1000031e 	bne	r2,zero,4001c30 <open+0x94>
    {
      status = index;
 4001c24:	e0bff817 	ldw	r2,-32(fp)
 4001c28:	e0bff715 	stw	r2,-36(fp)
 4001c2c:	00002a06 	br	4001cd8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4001c30:	e13ff817 	ldw	r4,-32(fp)
 4001c34:	01400304 	movi	r5,12
 4001c38:	40027040 	call	4002704 <__mulsi3>
 4001c3c:	1007883a 	mov	r3,r2
 4001c40:	00810034 	movhi	r2,1024
 4001c44:	108e3104 	addi	r2,r2,14532
 4001c48:	1885883a 	add	r2,r3,r2
 4001c4c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4001c50:	e0fffc17 	ldw	r3,-16(fp)
 4001c54:	00900034 	movhi	r2,16384
 4001c58:	10bfffc4 	addi	r2,r2,-1
 4001c5c:	1886703a 	and	r3,r3,r2
 4001c60:	e0bff917 	ldw	r2,-28(fp)
 4001c64:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4001c68:	e0bff617 	ldw	r2,-40(fp)
 4001c6c:	1004c03a 	cmpne	r2,r2,zero
 4001c70:	1000061e 	bne	r2,zero,4001c8c <open+0xf0>
 4001c74:	e13ff917 	ldw	r4,-28(fp)
 4001c78:	4001aa40 	call	4001aa4 <alt_file_locked>
 4001c7c:	e0bff715 	stw	r2,-36(fp)
 4001c80:	e0bff717 	ldw	r2,-36(fp)
 4001c84:	1004803a 	cmplt	r2,r2,zero
 4001c88:	1000131e 	bne	r2,zero,4001cd8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4001c8c:	e0bffa17 	ldw	r2,-24(fp)
 4001c90:	10800317 	ldw	r2,12(r2)
 4001c94:	1005003a 	cmpeq	r2,r2,zero
 4001c98:	1000091e 	bne	r2,zero,4001cc0 <open+0x124>
 4001c9c:	e0bffa17 	ldw	r2,-24(fp)
 4001ca0:	10800317 	ldw	r2,12(r2)
 4001ca4:	e13ff917 	ldw	r4,-28(fp)
 4001ca8:	e17ffb17 	ldw	r5,-20(fp)
 4001cac:	e1bffc17 	ldw	r6,-16(fp)
 4001cb0:	e1fffd17 	ldw	r7,-12(fp)
 4001cb4:	103ee83a 	callr	r2
 4001cb8:	e0bfff15 	stw	r2,-4(fp)
 4001cbc:	00000106 	br	4001cc4 <open+0x128>
 4001cc0:	e03fff15 	stw	zero,-4(fp)
 4001cc4:	e0bfff17 	ldw	r2,-4(fp)
 4001cc8:	e0bff715 	stw	r2,-36(fp)
 4001ccc:	00000206 	br	4001cd8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4001cd0:	00bffb44 	movi	r2,-19
 4001cd4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4001cd8:	e0bff717 	ldw	r2,-36(fp)
 4001cdc:	1004403a 	cmpge	r2,r2,zero
 4001ce0:	1000091e 	bne	r2,zero,4001d08 <open+0x16c>
  {
    alt_release_fd (index);  
 4001ce4:	e13ff817 	ldw	r4,-32(fp)
 4001ce8:	4001d880 	call	4001d88 <alt_release_fd>
    ALT_ERRNO = -status;
 4001cec:	4001d280 	call	4001d28 <alt_get_errno>
 4001cf0:	e0fff717 	ldw	r3,-36(fp)
 4001cf4:	00c7c83a 	sub	r3,zero,r3
 4001cf8:	10c00015 	stw	r3,0(r2)
    return -1;
 4001cfc:	00bfffc4 	movi	r2,-1
 4001d00:	e0bffe15 	stw	r2,-8(fp)
 4001d04:	00000206 	br	4001d10 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 4001d08:	e0bff817 	ldw	r2,-32(fp)
 4001d0c:	e0bffe15 	stw	r2,-8(fp)
 4001d10:	e0bffe17 	ldw	r2,-8(fp)
}
 4001d14:	e037883a 	mov	sp,fp
 4001d18:	dfc00117 	ldw	ra,4(sp)
 4001d1c:	df000017 	ldw	fp,0(sp)
 4001d20:	dec00204 	addi	sp,sp,8
 4001d24:	f800283a 	ret

04001d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001d28:	defffd04 	addi	sp,sp,-12
 4001d2c:	dfc00215 	stw	ra,8(sp)
 4001d30:	df000115 	stw	fp,4(sp)
 4001d34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4001d38:	00810034 	movhi	r2,1024
 4001d3c:	108f9604 	addi	r2,r2,15960
 4001d40:	10800017 	ldw	r2,0(r2)
 4001d44:	1005003a 	cmpeq	r2,r2,zero
 4001d48:	1000061e 	bne	r2,zero,4001d64 <alt_get_errno+0x3c>
 4001d4c:	00810034 	movhi	r2,1024
 4001d50:	108f9604 	addi	r2,r2,15960
 4001d54:	10800017 	ldw	r2,0(r2)
 4001d58:	103ee83a 	callr	r2
 4001d5c:	e0bfff15 	stw	r2,-4(fp)
 4001d60:	00000306 	br	4001d70 <alt_get_errno+0x48>
 4001d64:	00810034 	movhi	r2,1024
 4001d68:	10954404 	addi	r2,r2,21776
 4001d6c:	e0bfff15 	stw	r2,-4(fp)
 4001d70:	e0bfff17 	ldw	r2,-4(fp)
}
 4001d74:	e037883a 	mov	sp,fp
 4001d78:	dfc00117 	ldw	ra,4(sp)
 4001d7c:	df000017 	ldw	fp,0(sp)
 4001d80:	dec00204 	addi	sp,sp,8
 4001d84:	f800283a 	ret

04001d88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4001d88:	defffc04 	addi	sp,sp,-16
 4001d8c:	dfc00315 	stw	ra,12(sp)
 4001d90:	df000215 	stw	fp,8(sp)
 4001d94:	dc000115 	stw	r16,4(sp)
 4001d98:	df000104 	addi	fp,sp,4
 4001d9c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4001da0:	e0bfff17 	ldw	r2,-4(fp)
 4001da4:	108000d0 	cmplti	r2,r2,3
 4001da8:	10000f1e 	bne	r2,zero,4001de8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 4001dac:	e13fff17 	ldw	r4,-4(fp)
 4001db0:	04010034 	movhi	r16,1024
 4001db4:	840e3104 	addi	r16,r16,14532
 4001db8:	01400304 	movi	r5,12
 4001dbc:	40027040 	call	4002704 <__mulsi3>
 4001dc0:	1405883a 	add	r2,r2,r16
 4001dc4:	10800204 	addi	r2,r2,8
 4001dc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4001dcc:	e13fff17 	ldw	r4,-4(fp)
 4001dd0:	04010034 	movhi	r16,1024
 4001dd4:	840e3104 	addi	r16,r16,14532
 4001dd8:	01400304 	movi	r5,12
 4001ddc:	40027040 	call	4002704 <__mulsi3>
 4001de0:	1405883a 	add	r2,r2,r16
 4001de4:	10000015 	stw	zero,0(r2)
  }
}
 4001de8:	e037883a 	mov	sp,fp
 4001dec:	dfc00217 	ldw	ra,8(sp)
 4001df0:	df000117 	ldw	fp,4(sp)
 4001df4:	dc000017 	ldw	r16,0(sp)
 4001df8:	dec00304 	addi	sp,sp,12
 4001dfc:	f800283a 	ret

04001e00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4001e00:	defffa04 	addi	sp,sp,-24
 4001e04:	df000515 	stw	fp,20(sp)
 4001e08:	df000504 	addi	fp,sp,20
 4001e0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001e10:	0005303a 	rdctl	r2,status
 4001e14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001e18:	e0fffd17 	ldw	r3,-12(fp)
 4001e1c:	00bfff84 	movi	r2,-2
 4001e20:	1884703a 	and	r2,r3,r2
 4001e24:	1001703a 	wrctl	status,r2
  
  return context;
 4001e28:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4001e2c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4001e30:	e0bfff17 	ldw	r2,-4(fp)
 4001e34:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4001e38:	e0bffc17 	ldw	r2,-16(fp)
 4001e3c:	10c00017 	ldw	r3,0(r2)
 4001e40:	e0bffc17 	ldw	r2,-16(fp)
 4001e44:	10800117 	ldw	r2,4(r2)
 4001e48:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4001e4c:	e0bffc17 	ldw	r2,-16(fp)
 4001e50:	10c00117 	ldw	r3,4(r2)
 4001e54:	e0bffc17 	ldw	r2,-16(fp)
 4001e58:	10800017 	ldw	r2,0(r2)
 4001e5c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4001e60:	e0fffc17 	ldw	r3,-16(fp)
 4001e64:	e0bffc17 	ldw	r2,-16(fp)
 4001e68:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4001e6c:	e0fffc17 	ldw	r3,-16(fp)
 4001e70:	e0bffc17 	ldw	r2,-16(fp)
 4001e74:	18800015 	stw	r2,0(r3)
 4001e78:	e0bffe17 	ldw	r2,-8(fp)
 4001e7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001e80:	e0bffb17 	ldw	r2,-20(fp)
 4001e84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4001e88:	e037883a 	mov	sp,fp
 4001e8c:	df000017 	ldw	fp,0(sp)
 4001e90:	dec00104 	addi	sp,sp,4
 4001e94:	f800283a 	ret

04001e98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4001e98:	defffb04 	addi	sp,sp,-20
 4001e9c:	dfc00415 	stw	ra,16(sp)
 4001ea0:	df000315 	stw	fp,12(sp)
 4001ea4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4001ea8:	d0a00717 	ldw	r2,-32740(gp)
 4001eac:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4001eb0:	d0a5b217 	ldw	r2,-26936(gp)
 4001eb4:	10800044 	addi	r2,r2,1
 4001eb8:	d0a5b215 	stw	r2,-26936(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001ebc:	00003106 	br	4001f84 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4001ec0:	e0bffe17 	ldw	r2,-8(fp)
 4001ec4:	10800017 	ldw	r2,0(r2)
 4001ec8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4001ecc:	e0bffe17 	ldw	r2,-8(fp)
 4001ed0:	10800403 	ldbu	r2,16(r2)
 4001ed4:	10803fcc 	andi	r2,r2,255
 4001ed8:	1005003a 	cmpeq	r2,r2,zero
 4001edc:	1000051e 	bne	r2,zero,4001ef4 <alt_tick+0x5c>
 4001ee0:	d0a5b217 	ldw	r2,-26936(gp)
 4001ee4:	1004c03a 	cmpne	r2,r2,zero
 4001ee8:	1000021e 	bne	r2,zero,4001ef4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4001eec:	e0bffe17 	ldw	r2,-8(fp)
 4001ef0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4001ef4:	e0bffe17 	ldw	r2,-8(fp)
 4001ef8:	10c00217 	ldw	r3,8(r2)
 4001efc:	d0a5b217 	ldw	r2,-26936(gp)
 4001f00:	10c01e36 	bltu	r2,r3,4001f7c <alt_tick+0xe4>
 4001f04:	e0bffe17 	ldw	r2,-8(fp)
 4001f08:	10800403 	ldbu	r2,16(r2)
 4001f0c:	10803fcc 	andi	r2,r2,255
 4001f10:	1004c03a 	cmpne	r2,r2,zero
 4001f14:	1000191e 	bne	r2,zero,4001f7c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4001f18:	e0bffe17 	ldw	r2,-8(fp)
 4001f1c:	10c00317 	ldw	r3,12(r2)
 4001f20:	e0bffe17 	ldw	r2,-8(fp)
 4001f24:	11000517 	ldw	r4,20(r2)
 4001f28:	183ee83a 	callr	r3
 4001f2c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4001f30:	e0bffd17 	ldw	r2,-12(fp)
 4001f34:	1004c03a 	cmpne	r2,r2,zero
 4001f38:	1000031e 	bne	r2,zero,4001f48 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4001f3c:	e13ffe17 	ldw	r4,-8(fp)
 4001f40:	4001e000 	call	4001e00 <alt_alarm_stop>
 4001f44:	00000d06 	br	4001f7c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4001f48:	e0bffe17 	ldw	r2,-8(fp)
 4001f4c:	10c00217 	ldw	r3,8(r2)
 4001f50:	e0bffd17 	ldw	r2,-12(fp)
 4001f54:	1887883a 	add	r3,r3,r2
 4001f58:	e0bffe17 	ldw	r2,-8(fp)
 4001f5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001f60:	e0bffe17 	ldw	r2,-8(fp)
 4001f64:	10c00217 	ldw	r3,8(r2)
 4001f68:	d0a5b217 	ldw	r2,-26936(gp)
 4001f6c:	1880032e 	bgeu	r3,r2,4001f7c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4001f70:	e0fffe17 	ldw	r3,-8(fp)
 4001f74:	00800044 	movi	r2,1
 4001f78:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4001f7c:	e0bfff17 	ldw	r2,-4(fp)
 4001f80:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001f84:	d0e00704 	addi	r3,gp,-32740
 4001f88:	e0bffe17 	ldw	r2,-8(fp)
 4001f8c:	10ffcc1e 	bne	r2,r3,4001ec0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4001f90:	e037883a 	mov	sp,fp
 4001f94:	dfc00117 	ldw	ra,4(sp)
 4001f98:	df000017 	ldw	fp,0(sp)
 4001f9c:	dec00204 	addi	sp,sp,8
 4001fa0:	f800283a 	ret

04001fa4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4001fa4:	deffff04 	addi	sp,sp,-4
 4001fa8:	df000015 	stw	fp,0(sp)
 4001fac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4001fb0:	000170fa 	wrctl	ienable,zero
}
 4001fb4:	e037883a 	mov	sp,fp
 4001fb8:	df000017 	ldw	fp,0(sp)
 4001fbc:	dec00104 	addi	sp,sp,4
 4001fc0:	f800283a 	ret

04001fc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001fc4:	defff904 	addi	sp,sp,-28
 4001fc8:	dfc00615 	stw	ra,24(sp)
 4001fcc:	df000515 	stw	fp,20(sp)
 4001fd0:	df000504 	addi	fp,sp,20
 4001fd4:	e13ffd15 	stw	r4,-12(fp)
 4001fd8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4001fdc:	e0bffe17 	ldw	r2,-8(fp)
 4001fe0:	10800017 	ldw	r2,0(r2)
 4001fe4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4001fe8:	e13ffd17 	ldw	r4,-12(fp)
 4001fec:	40023a80 	call	40023a8 <strlen>
 4001ff0:	10800044 	addi	r2,r2,1
 4001ff4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001ff8:	00000d06 	br	4002030 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001ffc:	e0bffc17 	ldw	r2,-16(fp)
 4002000:	11000217 	ldw	r4,8(r2)
 4002004:	e1bffb17 	ldw	r6,-20(fp)
 4002008:	e17ffd17 	ldw	r5,-12(fp)
 400200c:	40022940 	call	4002294 <memcmp>
 4002010:	1004c03a 	cmpne	r2,r2,zero
 4002014:	1000031e 	bne	r2,zero,4002024 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4002018:	e0bffc17 	ldw	r2,-16(fp)
 400201c:	e0bfff15 	stw	r2,-4(fp)
 4002020:	00000706 	br	4002040 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4002024:	e0bffc17 	ldw	r2,-16(fp)
 4002028:	10800017 	ldw	r2,0(r2)
 400202c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002030:	e0fffe17 	ldw	r3,-8(fp)
 4002034:	e0bffc17 	ldw	r2,-16(fp)
 4002038:	10fff01e 	bne	r2,r3,4001ffc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400203c:	e03fff15 	stw	zero,-4(fp)
 4002040:	e0bfff17 	ldw	r2,-4(fp)
}
 4002044:	e037883a 	mov	sp,fp
 4002048:	dfc00117 	ldw	ra,4(sp)
 400204c:	df000017 	ldw	fp,0(sp)
 4002050:	dec00204 	addi	sp,sp,8
 4002054:	f800283a 	ret

04002058 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4002058:	defffa04 	addi	sp,sp,-24
 400205c:	dfc00515 	stw	ra,20(sp)
 4002060:	df000415 	stw	fp,16(sp)
 4002064:	df000404 	addi	fp,sp,16
 4002068:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400206c:	00810034 	movhi	r2,1024
 4002070:	108f9104 	addi	r2,r2,15940
 4002074:	10800017 	ldw	r2,0(r2)
 4002078:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400207c:	00003306 	br	400214c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4002080:	e0bffd17 	ldw	r2,-12(fp)
 4002084:	11000217 	ldw	r4,8(r2)
 4002088:	40023a80 	call	40023a8 <strlen>
 400208c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4002090:	e0bffd17 	ldw	r2,-12(fp)
 4002094:	10c00217 	ldw	r3,8(r2)
 4002098:	e0bffc17 	ldw	r2,-16(fp)
 400209c:	1885883a 	add	r2,r3,r2
 40020a0:	10bfffc4 	addi	r2,r2,-1
 40020a4:	10800003 	ldbu	r2,0(r2)
 40020a8:	10803fcc 	andi	r2,r2,255
 40020ac:	1080201c 	xori	r2,r2,128
 40020b0:	10bfe004 	addi	r2,r2,-128
 40020b4:	10800bd8 	cmpnei	r2,r2,47
 40020b8:	1000031e 	bne	r2,zero,40020c8 <alt_find_file+0x70>
    {
      len -= 1;
 40020bc:	e0bffc17 	ldw	r2,-16(fp)
 40020c0:	10bfffc4 	addi	r2,r2,-1
 40020c4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40020c8:	e0bffc17 	ldw	r2,-16(fp)
 40020cc:	1007883a 	mov	r3,r2
 40020d0:	e0bffe17 	ldw	r2,-8(fp)
 40020d4:	1885883a 	add	r2,r3,r2
 40020d8:	10800003 	ldbu	r2,0(r2)
 40020dc:	10803fcc 	andi	r2,r2,255
 40020e0:	1080201c 	xori	r2,r2,128
 40020e4:	10bfe004 	addi	r2,r2,-128
 40020e8:	10800be0 	cmpeqi	r2,r2,47
 40020ec:	10000a1e 	bne	r2,zero,4002118 <alt_find_file+0xc0>
 40020f0:	e0bffc17 	ldw	r2,-16(fp)
 40020f4:	1007883a 	mov	r3,r2
 40020f8:	e0bffe17 	ldw	r2,-8(fp)
 40020fc:	1885883a 	add	r2,r3,r2
 4002100:	10800003 	ldbu	r2,0(r2)
 4002104:	10803fcc 	andi	r2,r2,255
 4002108:	1080201c 	xori	r2,r2,128
 400210c:	10bfe004 	addi	r2,r2,-128
 4002110:	1004c03a 	cmpne	r2,r2,zero
 4002114:	10000a1e 	bne	r2,zero,4002140 <alt_find_file+0xe8>
 4002118:	e0bffd17 	ldw	r2,-12(fp)
 400211c:	11000217 	ldw	r4,8(r2)
 4002120:	e1bffc17 	ldw	r6,-16(fp)
 4002124:	e17ffe17 	ldw	r5,-8(fp)
 4002128:	40022940 	call	4002294 <memcmp>
 400212c:	1004c03a 	cmpne	r2,r2,zero
 4002130:	1000031e 	bne	r2,zero,4002140 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4002134:	e0bffd17 	ldw	r2,-12(fp)
 4002138:	e0bfff15 	stw	r2,-4(fp)
 400213c:	00000806 	br	4002160 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4002140:	e0bffd17 	ldw	r2,-12(fp)
 4002144:	10800017 	ldw	r2,0(r2)
 4002148:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400214c:	00c10034 	movhi	r3,1024
 4002150:	18cf9104 	addi	r3,r3,15940
 4002154:	e0bffd17 	ldw	r2,-12(fp)
 4002158:	10ffc91e 	bne	r2,r3,4002080 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400215c:	e03fff15 	stw	zero,-4(fp)
 4002160:	e0bfff17 	ldw	r2,-4(fp)
}
 4002164:	e037883a 	mov	sp,fp
 4002168:	dfc00117 	ldw	ra,4(sp)
 400216c:	df000017 	ldw	fp,0(sp)
 4002170:	dec00204 	addi	sp,sp,8
 4002174:	f800283a 	ret

04002178 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4002178:	defffa04 	addi	sp,sp,-24
 400217c:	dfc00515 	stw	ra,20(sp)
 4002180:	df000415 	stw	fp,16(sp)
 4002184:	dc000315 	stw	r16,12(sp)
 4002188:	df000304 	addi	fp,sp,12
 400218c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4002190:	00bffa04 	movi	r2,-24
 4002194:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002198:	e03ffe15 	stw	zero,-8(fp)
 400219c:	00002006 	br	4002220 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 40021a0:	e13ffe17 	ldw	r4,-8(fp)
 40021a4:	04010034 	movhi	r16,1024
 40021a8:	840e3104 	addi	r16,r16,14532
 40021ac:	01400304 	movi	r5,12
 40021b0:	40027040 	call	4002704 <__mulsi3>
 40021b4:	1405883a 	add	r2,r2,r16
 40021b8:	10800017 	ldw	r2,0(r2)
 40021bc:	1004c03a 	cmpne	r2,r2,zero
 40021c0:	1000141e 	bne	r2,zero,4002214 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 40021c4:	e13ffe17 	ldw	r4,-8(fp)
 40021c8:	04010034 	movhi	r16,1024
 40021cc:	840e3104 	addi	r16,r16,14532
 40021d0:	01400304 	movi	r5,12
 40021d4:	40027040 	call	4002704 <__mulsi3>
 40021d8:	1407883a 	add	r3,r2,r16
 40021dc:	e0bfff17 	ldw	r2,-4(fp)
 40021e0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40021e4:	00810034 	movhi	r2,1024
 40021e8:	108f9504 	addi	r2,r2,15956
 40021ec:	10c00017 	ldw	r3,0(r2)
 40021f0:	e0bffe17 	ldw	r2,-8(fp)
 40021f4:	1880040e 	bge	r3,r2,4002208 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 40021f8:	00c10034 	movhi	r3,1024
 40021fc:	18cf9504 	addi	r3,r3,15956
 4002200:	e0bffe17 	ldw	r2,-8(fp)
 4002204:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4002208:	e0bffe17 	ldw	r2,-8(fp)
 400220c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4002210:	00000606 	br	400222c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002214:	e0bffe17 	ldw	r2,-8(fp)
 4002218:	10800044 	addi	r2,r2,1
 400221c:	e0bffe15 	stw	r2,-8(fp)
 4002220:	e0bffe17 	ldw	r2,-8(fp)
 4002224:	10800810 	cmplti	r2,r2,32
 4002228:	103fdd1e 	bne	r2,zero,40021a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400222c:	e0bffd17 	ldw	r2,-12(fp)
}
 4002230:	e037883a 	mov	sp,fp
 4002234:	dfc00217 	ldw	ra,8(sp)
 4002238:	df000117 	ldw	fp,4(sp)
 400223c:	dc000017 	ldw	r16,0(sp)
 4002240:	dec00304 	addi	sp,sp,12
 4002244:	f800283a 	ret

04002248 <atexit>:
 4002248:	200b883a 	mov	r5,r4
 400224c:	000d883a 	mov	r6,zero
 4002250:	0009883a 	mov	r4,zero
 4002254:	000f883a 	mov	r7,zero
 4002258:	400241c1 	jmpi	400241c <__register_exitproc>

0400225c <exit>:
 400225c:	defffe04 	addi	sp,sp,-8
 4002260:	000b883a 	mov	r5,zero
 4002264:	dc000015 	stw	r16,0(sp)
 4002268:	dfc00115 	stw	ra,4(sp)
 400226c:	2021883a 	mov	r16,r4
 4002270:	40025540 	call	4002554 <__call_exitprocs>
 4002274:	00810034 	movhi	r2,1024
 4002278:	108f9b04 	addi	r2,r2,15980
 400227c:	11000017 	ldw	r4,0(r2)
 4002280:	20800f17 	ldw	r2,60(r4)
 4002284:	10000126 	beq	r2,zero,400228c <exit+0x30>
 4002288:	103ee83a 	callr	r2
 400228c:	8009883a 	mov	r4,r16
 4002290:	400277c0 	call	400277c <_exit>

04002294 <memcmp>:
 4002294:	00c000c4 	movi	r3,3
 4002298:	1980032e 	bgeu	r3,r6,40022a8 <memcmp+0x14>
 400229c:	2144b03a 	or	r2,r4,r5
 40022a0:	10c4703a 	and	r2,r2,r3
 40022a4:	10000f26 	beq	r2,zero,40022e4 <memcmp+0x50>
 40022a8:	31ffffc4 	addi	r7,r6,-1
 40022ac:	3000061e 	bne	r6,zero,40022c8 <memcmp+0x34>
 40022b0:	00000a06 	br	40022dc <memcmp+0x48>
 40022b4:	39ffffc4 	addi	r7,r7,-1
 40022b8:	00bfffc4 	movi	r2,-1
 40022bc:	21000044 	addi	r4,r4,1
 40022c0:	29400044 	addi	r5,r5,1
 40022c4:	38800526 	beq	r7,r2,40022dc <memcmp+0x48>
 40022c8:	20c00003 	ldbu	r3,0(r4)
 40022cc:	28800003 	ldbu	r2,0(r5)
 40022d0:	18bff826 	beq	r3,r2,40022b4 <memcmp+0x20>
 40022d4:	1885c83a 	sub	r2,r3,r2
 40022d8:	f800283a 	ret
 40022dc:	0005883a 	mov	r2,zero
 40022e0:	f800283a 	ret
 40022e4:	180f883a 	mov	r7,r3
 40022e8:	20c00017 	ldw	r3,0(r4)
 40022ec:	28800017 	ldw	r2,0(r5)
 40022f0:	18bfed1e 	bne	r3,r2,40022a8 <memcmp+0x14>
 40022f4:	31bfff04 	addi	r6,r6,-4
 40022f8:	21000104 	addi	r4,r4,4
 40022fc:	29400104 	addi	r5,r5,4
 4002300:	39bff936 	bltu	r7,r6,40022e8 <memcmp+0x54>
 4002304:	003fe806 	br	40022a8 <memcmp+0x14>

04002308 <memcpy>:
 4002308:	01c003c4 	movi	r7,15
 400230c:	2007883a 	mov	r3,r4
 4002310:	3980032e 	bgeu	r7,r6,4002320 <memcpy+0x18>
 4002314:	2904b03a 	or	r2,r5,r4
 4002318:	108000cc 	andi	r2,r2,3
 400231c:	10000926 	beq	r2,zero,4002344 <memcpy+0x3c>
 4002320:	30000626 	beq	r6,zero,400233c <memcpy+0x34>
 4002324:	30cd883a 	add	r6,r6,r3
 4002328:	28800003 	ldbu	r2,0(r5)
 400232c:	29400044 	addi	r5,r5,1
 4002330:	18800005 	stb	r2,0(r3)
 4002334:	18c00044 	addi	r3,r3,1
 4002338:	30fffb1e 	bne	r6,r3,4002328 <memcpy+0x20>
 400233c:	2005883a 	mov	r2,r4
 4002340:	f800283a 	ret
 4002344:	3811883a 	mov	r8,r7
 4002348:	200f883a 	mov	r7,r4
 400234c:	28c00017 	ldw	r3,0(r5)
 4002350:	31bffc04 	addi	r6,r6,-16
 4002354:	38c00015 	stw	r3,0(r7)
 4002358:	28800117 	ldw	r2,4(r5)
 400235c:	38800115 	stw	r2,4(r7)
 4002360:	28c00217 	ldw	r3,8(r5)
 4002364:	38c00215 	stw	r3,8(r7)
 4002368:	28800317 	ldw	r2,12(r5)
 400236c:	29400404 	addi	r5,r5,16
 4002370:	38800315 	stw	r2,12(r7)
 4002374:	39c00404 	addi	r7,r7,16
 4002378:	41bff436 	bltu	r8,r6,400234c <memcpy+0x44>
 400237c:	008000c4 	movi	r2,3
 4002380:	1180072e 	bgeu	r2,r6,40023a0 <memcpy+0x98>
 4002384:	1007883a 	mov	r3,r2
 4002388:	28800017 	ldw	r2,0(r5)
 400238c:	31bfff04 	addi	r6,r6,-4
 4002390:	29400104 	addi	r5,r5,4
 4002394:	38800015 	stw	r2,0(r7)
 4002398:	39c00104 	addi	r7,r7,4
 400239c:	19bffa36 	bltu	r3,r6,4002388 <memcpy+0x80>
 40023a0:	3807883a 	mov	r3,r7
 40023a4:	003fde06 	br	4002320 <memcpy+0x18>

040023a8 <strlen>:
 40023a8:	208000cc 	andi	r2,r4,3
 40023ac:	2011883a 	mov	r8,r4
 40023b0:	1000161e 	bne	r2,zero,400240c <strlen+0x64>
 40023b4:	20c00017 	ldw	r3,0(r4)
 40023b8:	017fbff4 	movhi	r5,65279
 40023bc:	297fbfc4 	addi	r5,r5,-257
 40023c0:	01e02074 	movhi	r7,32897
 40023c4:	39e02004 	addi	r7,r7,-32640
 40023c8:	1945883a 	add	r2,r3,r5
 40023cc:	11c4703a 	and	r2,r2,r7
 40023d0:	00c6303a 	nor	r3,zero,r3
 40023d4:	1886703a 	and	r3,r3,r2
 40023d8:	18000c1e 	bne	r3,zero,400240c <strlen+0x64>
 40023dc:	280d883a 	mov	r6,r5
 40023e0:	380b883a 	mov	r5,r7
 40023e4:	21000104 	addi	r4,r4,4
 40023e8:	20800017 	ldw	r2,0(r4)
 40023ec:	1187883a 	add	r3,r2,r6
 40023f0:	1946703a 	and	r3,r3,r5
 40023f4:	0084303a 	nor	r2,zero,r2
 40023f8:	10c4703a 	and	r2,r2,r3
 40023fc:	103ff926 	beq	r2,zero,40023e4 <strlen+0x3c>
 4002400:	20800007 	ldb	r2,0(r4)
 4002404:	10000326 	beq	r2,zero,4002414 <strlen+0x6c>
 4002408:	21000044 	addi	r4,r4,1
 400240c:	20800007 	ldb	r2,0(r4)
 4002410:	103ffd1e 	bne	r2,zero,4002408 <strlen+0x60>
 4002414:	2205c83a 	sub	r2,r4,r8
 4002418:	f800283a 	ret

0400241c <__register_exitproc>:
 400241c:	defffa04 	addi	sp,sp,-24
 4002420:	00810034 	movhi	r2,1024
 4002424:	108f9b04 	addi	r2,r2,15980
 4002428:	dc000015 	stw	r16,0(sp)
 400242c:	14000017 	ldw	r16,0(r2)
 4002430:	dd000415 	stw	r20,16(sp)
 4002434:	2829883a 	mov	r20,r5
 4002438:	81405217 	ldw	r5,328(r16)
 400243c:	dcc00315 	stw	r19,12(sp)
 4002440:	dc800215 	stw	r18,8(sp)
 4002444:	dc400115 	stw	r17,4(sp)
 4002448:	dfc00515 	stw	ra,20(sp)
 400244c:	2023883a 	mov	r17,r4
 4002450:	3027883a 	mov	r19,r6
 4002454:	3825883a 	mov	r18,r7
 4002458:	28002526 	beq	r5,zero,40024f0 <__register_exitproc+0xd4>
 400245c:	29000117 	ldw	r4,4(r5)
 4002460:	008007c4 	movi	r2,31
 4002464:	11002716 	blt	r2,r4,4002504 <__register_exitproc+0xe8>
 4002468:	8800101e 	bne	r17,zero,40024ac <__register_exitproc+0x90>
 400246c:	2105883a 	add	r2,r4,r4
 4002470:	1085883a 	add	r2,r2,r2
 4002474:	20c00044 	addi	r3,r4,1
 4002478:	1145883a 	add	r2,r2,r5
 400247c:	0009883a 	mov	r4,zero
 4002480:	15000215 	stw	r20,8(r2)
 4002484:	28c00115 	stw	r3,4(r5)
 4002488:	2005883a 	mov	r2,r4
 400248c:	dfc00517 	ldw	ra,20(sp)
 4002490:	dd000417 	ldw	r20,16(sp)
 4002494:	dcc00317 	ldw	r19,12(sp)
 4002498:	dc800217 	ldw	r18,8(sp)
 400249c:	dc400117 	ldw	r17,4(sp)
 40024a0:	dc000017 	ldw	r16,0(sp)
 40024a4:	dec00604 	addi	sp,sp,24
 40024a8:	f800283a 	ret
 40024ac:	29802204 	addi	r6,r5,136
 40024b0:	00800044 	movi	r2,1
 40024b4:	110e983a 	sll	r7,r2,r4
 40024b8:	30c04017 	ldw	r3,256(r6)
 40024bc:	2105883a 	add	r2,r4,r4
 40024c0:	1085883a 	add	r2,r2,r2
 40024c4:	1185883a 	add	r2,r2,r6
 40024c8:	19c6b03a 	or	r3,r3,r7
 40024cc:	14802015 	stw	r18,128(r2)
 40024d0:	14c00015 	stw	r19,0(r2)
 40024d4:	00800084 	movi	r2,2
 40024d8:	30c04015 	stw	r3,256(r6)
 40024dc:	88bfe31e 	bne	r17,r2,400246c <__register_exitproc+0x50>
 40024e0:	30804117 	ldw	r2,260(r6)
 40024e4:	11c4b03a 	or	r2,r2,r7
 40024e8:	30804115 	stw	r2,260(r6)
 40024ec:	003fdf06 	br	400246c <__register_exitproc+0x50>
 40024f0:	00810034 	movhi	r2,1024
 40024f4:	10958504 	addi	r2,r2,22036
 40024f8:	100b883a 	mov	r5,r2
 40024fc:	80805215 	stw	r2,328(r16)
 4002500:	003fd606 	br	400245c <__register_exitproc+0x40>
 4002504:	00800034 	movhi	r2,0
 4002508:	10800004 	addi	r2,r2,0
 400250c:	1000021e 	bne	r2,zero,4002518 <__register_exitproc+0xfc>
 4002510:	013fffc4 	movi	r4,-1
 4002514:	003fdc06 	br	4002488 <__register_exitproc+0x6c>
 4002518:	01006404 	movi	r4,400
 400251c:	103ee83a 	callr	r2
 4002520:	1007883a 	mov	r3,r2
 4002524:	103ffa26 	beq	r2,zero,4002510 <__register_exitproc+0xf4>
 4002528:	80805217 	ldw	r2,328(r16)
 400252c:	180b883a 	mov	r5,r3
 4002530:	18000115 	stw	zero,4(r3)
 4002534:	18800015 	stw	r2,0(r3)
 4002538:	80c05215 	stw	r3,328(r16)
 400253c:	18006215 	stw	zero,392(r3)
 4002540:	18006315 	stw	zero,396(r3)
 4002544:	0009883a 	mov	r4,zero
 4002548:	883fc826 	beq	r17,zero,400246c <__register_exitproc+0x50>
 400254c:	003fd706 	br	40024ac <__register_exitproc+0x90>

04002550 <register_fini>:
 4002550:	f800283a 	ret

04002554 <__call_exitprocs>:
 4002554:	00810034 	movhi	r2,1024
 4002558:	108f9b04 	addi	r2,r2,15980
 400255c:	10800017 	ldw	r2,0(r2)
 4002560:	defff304 	addi	sp,sp,-52
 4002564:	df000b15 	stw	fp,44(sp)
 4002568:	d8800115 	stw	r2,4(sp)
 400256c:	00800034 	movhi	r2,0
 4002570:	10800004 	addi	r2,r2,0
 4002574:	1005003a 	cmpeq	r2,r2,zero
 4002578:	d8800215 	stw	r2,8(sp)
 400257c:	d8800117 	ldw	r2,4(sp)
 4002580:	dd400815 	stw	r21,32(sp)
 4002584:	dd000715 	stw	r20,28(sp)
 4002588:	10805204 	addi	r2,r2,328
 400258c:	dfc00c15 	stw	ra,48(sp)
 4002590:	ddc00a15 	stw	r23,40(sp)
 4002594:	dd800915 	stw	r22,36(sp)
 4002598:	dcc00615 	stw	r19,24(sp)
 400259c:	dc800515 	stw	r18,20(sp)
 40025a0:	dc400415 	stw	r17,16(sp)
 40025a4:	dc000315 	stw	r16,12(sp)
 40025a8:	282b883a 	mov	r21,r5
 40025ac:	2039883a 	mov	fp,r4
 40025b0:	d8800015 	stw	r2,0(sp)
 40025b4:	2829003a 	cmpeq	r20,r5,zero
 40025b8:	d8800117 	ldw	r2,4(sp)
 40025bc:	14405217 	ldw	r17,328(r2)
 40025c0:	88001026 	beq	r17,zero,4002604 <__call_exitprocs+0xb0>
 40025c4:	ddc00017 	ldw	r23,0(sp)
 40025c8:	88800117 	ldw	r2,4(r17)
 40025cc:	8c802204 	addi	r18,r17,136
 40025d0:	143fffc4 	addi	r16,r2,-1
 40025d4:	80000916 	blt	r16,zero,40025fc <__call_exitprocs+0xa8>
 40025d8:	05bfffc4 	movi	r22,-1
 40025dc:	a000151e 	bne	r20,zero,4002634 <__call_exitprocs+0xe0>
 40025e0:	8409883a 	add	r4,r16,r16
 40025e4:	2105883a 	add	r2,r4,r4
 40025e8:	1485883a 	add	r2,r2,r18
 40025ec:	10c02017 	ldw	r3,128(r2)
 40025f0:	a8c01126 	beq	r21,r3,4002638 <__call_exitprocs+0xe4>
 40025f4:	843fffc4 	addi	r16,r16,-1
 40025f8:	85bff81e 	bne	r16,r22,40025dc <__call_exitprocs+0x88>
 40025fc:	d8800217 	ldw	r2,8(sp)
 4002600:	10003126 	beq	r2,zero,40026c8 <__call_exitprocs+0x174>
 4002604:	dfc00c17 	ldw	ra,48(sp)
 4002608:	df000b17 	ldw	fp,44(sp)
 400260c:	ddc00a17 	ldw	r23,40(sp)
 4002610:	dd800917 	ldw	r22,36(sp)
 4002614:	dd400817 	ldw	r21,32(sp)
 4002618:	dd000717 	ldw	r20,28(sp)
 400261c:	dcc00617 	ldw	r19,24(sp)
 4002620:	dc800517 	ldw	r18,20(sp)
 4002624:	dc400417 	ldw	r17,16(sp)
 4002628:	dc000317 	ldw	r16,12(sp)
 400262c:	dec00d04 	addi	sp,sp,52
 4002630:	f800283a 	ret
 4002634:	8409883a 	add	r4,r16,r16
 4002638:	88c00117 	ldw	r3,4(r17)
 400263c:	2105883a 	add	r2,r4,r4
 4002640:	1445883a 	add	r2,r2,r17
 4002644:	18ffffc4 	addi	r3,r3,-1
 4002648:	11800217 	ldw	r6,8(r2)
 400264c:	1c001526 	beq	r3,r16,40026a4 <__call_exitprocs+0x150>
 4002650:	10000215 	stw	zero,8(r2)
 4002654:	303fe726 	beq	r6,zero,40025f4 <__call_exitprocs+0xa0>
 4002658:	00c00044 	movi	r3,1
 400265c:	1c06983a 	sll	r3,r3,r16
 4002660:	90804017 	ldw	r2,256(r18)
 4002664:	8cc00117 	ldw	r19,4(r17)
 4002668:	1884703a 	and	r2,r3,r2
 400266c:	10001426 	beq	r2,zero,40026c0 <__call_exitprocs+0x16c>
 4002670:	90804117 	ldw	r2,260(r18)
 4002674:	1884703a 	and	r2,r3,r2
 4002678:	10000c1e 	bne	r2,zero,40026ac <__call_exitprocs+0x158>
 400267c:	2105883a 	add	r2,r4,r4
 4002680:	1485883a 	add	r2,r2,r18
 4002684:	11400017 	ldw	r5,0(r2)
 4002688:	e009883a 	mov	r4,fp
 400268c:	303ee83a 	callr	r6
 4002690:	88800117 	ldw	r2,4(r17)
 4002694:	98bfc81e 	bne	r19,r2,40025b8 <__call_exitprocs+0x64>
 4002698:	b8800017 	ldw	r2,0(r23)
 400269c:	147fd526 	beq	r2,r17,40025f4 <__call_exitprocs+0xa0>
 40026a0:	003fc506 	br	40025b8 <__call_exitprocs+0x64>
 40026a4:	8c000115 	stw	r16,4(r17)
 40026a8:	003fea06 	br	4002654 <__call_exitprocs+0x100>
 40026ac:	2105883a 	add	r2,r4,r4
 40026b0:	1485883a 	add	r2,r2,r18
 40026b4:	11000017 	ldw	r4,0(r2)
 40026b8:	303ee83a 	callr	r6
 40026bc:	003ff406 	br	4002690 <__call_exitprocs+0x13c>
 40026c0:	303ee83a 	callr	r6
 40026c4:	003ff206 	br	4002690 <__call_exitprocs+0x13c>
 40026c8:	88800117 	ldw	r2,4(r17)
 40026cc:	1000081e 	bne	r2,zero,40026f0 <__call_exitprocs+0x19c>
 40026d0:	89000017 	ldw	r4,0(r17)
 40026d4:	20000726 	beq	r4,zero,40026f4 <__call_exitprocs+0x1a0>
 40026d8:	b9000015 	stw	r4,0(r23)
 40026dc:	8809883a 	mov	r4,r17
 40026e0:	00000000 	call	0 <__alt_mem_onchip_memory-0x201000>
 40026e4:	bc400017 	ldw	r17,0(r23)
 40026e8:	883fb71e 	bne	r17,zero,40025c8 <__call_exitprocs+0x74>
 40026ec:	003fc506 	br	4002604 <__call_exitprocs+0xb0>
 40026f0:	89000017 	ldw	r4,0(r17)
 40026f4:	882f883a 	mov	r23,r17
 40026f8:	2023883a 	mov	r17,r4
 40026fc:	883fb21e 	bne	r17,zero,40025c8 <__call_exitprocs+0x74>
 4002700:	003fc006 	br	4002604 <__call_exitprocs+0xb0>

04002704 <__mulsi3>:
 4002704:	20000a26 	beq	r4,zero,4002730 <__mulsi3+0x2c>
 4002708:	0007883a 	mov	r3,zero
 400270c:	2080004c 	andi	r2,r4,1
 4002710:	1005003a 	cmpeq	r2,r2,zero
 4002714:	2008d07a 	srli	r4,r4,1
 4002718:	1000011e 	bne	r2,zero,4002720 <__mulsi3+0x1c>
 400271c:	1947883a 	add	r3,r3,r5
 4002720:	294b883a 	add	r5,r5,r5
 4002724:	203ff91e 	bne	r4,zero,400270c <__mulsi3+0x8>
 4002728:	1805883a 	mov	r2,r3
 400272c:	f800283a 	ret
 4002730:	0007883a 	mov	r3,zero
 4002734:	1805883a 	mov	r2,r3
 4002738:	f800283a 	ret

0400273c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 400273c:	defffd04 	addi	sp,sp,-12
 4002740:	df000215 	stw	fp,8(sp)
 4002744:	df000204 	addi	fp,sp,8
 4002748:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 400274c:	e0bfff17 	ldw	r2,-4(fp)
 4002750:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4002754:	e0bffe17 	ldw	r2,-8(fp)
 4002758:	1005003a 	cmpeq	r2,r2,zero
 400275c:	1000021e 	bne	r2,zero,4002768 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4002760:	002af070 	cmpltui	zero,zero,43969
 4002764:	00000106 	br	400276c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4002768:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 400276c:	e037883a 	mov	sp,fp
 4002770:	df000017 	ldw	fp,0(sp)
 4002774:	dec00104 	addi	sp,sp,4
 4002778:	f800283a 	ret

0400277c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400277c:	defffd04 	addi	sp,sp,-12
 4002780:	dfc00215 	stw	ra,8(sp)
 4002784:	df000115 	stw	fp,4(sp)
 4002788:	df000104 	addi	fp,sp,4
 400278c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4002790:	e13fff17 	ldw	r4,-4(fp)
 4002794:	400273c0 	call	400273c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4002798:	003fff06 	br	4002798 <_exit+0x1c>
 400279c:	04002550 	cmplti	r16,zero,149
